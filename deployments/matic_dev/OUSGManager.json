{
  "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rwa",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "managerAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumRedemptionAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_kycRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kycRequirementGroup",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArraySizeMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetSenderCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositProofAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositorNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeaturePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeRecipientCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPriceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KYCCheckFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIdAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIdNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RWACannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemerNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedemptionProofAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedemptionTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistryZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TxnAlreadyValidated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAssetSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAssetSender",
          "type": "address"
        }
      ],
      "name": "AssetSenderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmountAfterFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositProofAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "depositId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDepositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDepositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPriceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositorOverwritten",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "FeeRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "KYCRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRequirementGroup",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRequirementGroup",
          "type": "uint256"
        }
      ],
      "name": "KYCRequirementGroupSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimum",
          "type": "uint256"
        }
      ],
      "name": "MinimumDepositAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRedemptionMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRedemptionMin",
          "type": "uint256"
        }
      ],
      "name": "MinimumRedemptionAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "depositId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rwaAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmountDeposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "name": "MintCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "MintFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "depositId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmountDeposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmountAfterFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "MintRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPricer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPricer",
          "type": "address"
        }
      ],
      "name": "NewPricerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimum",
          "type": "uint256"
        }
      ],
      "name": "OffChainRedemptionMinimumSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OffChainRedemptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "OffChainRedemptionUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "depositIdSet",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceIdSet",
          "type": "uint256"
        }
      ],
      "name": "PriceIdSetForDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "redemptionIdSet",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceIdSet",
          "type": "uint256"
        }
      ],
      "name": "PriceIdSetForRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "redemptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRedeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRedeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPriceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRWATokenAmountBurned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRWATokenAmountBurned",
          "type": "uint256"
        }
      ],
      "name": "RedeemerOverwritten",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "redemptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rwaAmountRequested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmountReturned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "name": "RedemptionCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "RedemptionFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RedemptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rwaAmountBurned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RedemptionProofAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "redemptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rwaAmountIn",
          "type": "uint256"
        }
      ],
      "name": "RedemptionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "redemptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rwaTokenAmountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offChainDestination",
          "type": "bytes32"
        }
      ],
      "name": "RedemptionRequestedServicedOffChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RedemptionUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SubscriptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SubscriptionUnpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_ID_SETTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEMPTION_PROVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmountAfterFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "addProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rwaAmountToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "addRedemptionProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "depositIds",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "redemptionIds",
          "type": "bytes32[]"
        }
      ],
      "name": "claimRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "depositIdToDepositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountDepositedMinusFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kycRegistry",
      "outputs": [
        {
          "internalType": "contract IKYCRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kycRequirementGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumOffChainRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumRedemptionAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offChainRedemptionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "depositIdToOverwrite",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmountAfterFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "name": "overwriteDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "redemptionIdToOverwrite",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rwaTokenAmountBurned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "name": "overwriteRedeemer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseOffChainRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricer",
      "outputs": [
        {
          "internalType": "contract IPricerReader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "redemptionIdToRedeemer",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountRwaTokenBurned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionRequestCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountRWATokenToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "offChainDestination",
          "type": "bytes32"
        }
      ],
      "name": "requestRedemptionServicedOffchain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rwa",
      "outputs": [
        {
          "internalType": "contract IRWALike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAssetSender",
          "type": "address"
        }
      ],
      "name": "setAssetSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kycRegistry",
          "type": "address"
        }
      ],
      "name": "setKYCRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kycRequirementGroup",
          "type": "uint256"
        }
      ],
      "name": "setKYCRequirementGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumRedemptionAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumRedemptionAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "name": "setMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumOffChainRedemptionAmount",
          "type": "uint256"
        }
      ],
      "name": "setOffChainRedemptionMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "depositIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "priceIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPriceIdForDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "redemptionIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "priceIds",
          "type": "uint256[]"
        }
      ],
      "name": "setPriceIdForRedemptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPricer",
          "type": "address"
        }
      ],
      "name": "setPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionFee",
          "type": "uint256"
        }
      ],
      "name": "setRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionRequestCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseOffChainRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseRedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
  "receipt": {
    "to": null,
    "from": "0x6F368F8e9828d6F9530fD3E2300c2376312df1A6",
    "contractAddress": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
    "transactionIndex": 40,
    "gasUsed": "3540706",
    "logsBloom": "0x08000004000004000800000000000000080000000000000000000000000000000110000004000000000000000000000000008000000000000000000000000000000000000000028000000000000000800000300000000000200100004004008000000000020000400000000000800800004000000c00100080000040000000000000000000000000000200000000000000000000000000000000000000000000200000000000000000000000000000000000000000000020001000000009004000000100000000000001001000000010000000000000000100100000000020000000000008000000020000000000000000000000000000000002100000100000",
    "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48",
    "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db17",
          "0x0000000000000000000000006f368f8e9828d6f9530fd3e2300c2376312df1a6"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03",
          "0x0000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db17",
          "0x0000000000000000000000006f368f8e9828d6f9530fd3e2300c2376312df1a6"
        ],
        "data": "0x",
        "logIndex": 175,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d",
          "0x0000000000000000000000003d7a5edfcdca0f9fdd066fb94d306f2b4cc7db17",
          "0x0000000000000000000000006f368f8e9828d6f9530fd3e2300c2376312df1a6"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03"
        ],
        "data": "0x",
        "logIndex": 177,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03"
        ],
        "data": "0x",
        "logIndex": 178,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03"
        ],
        "data": "0x",
        "logIndex": 179,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0x7d25fe3c08dd306579e1d2a5002c9c44f52c27fc3754b43c75ef1e080d454c8a"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000abfb6c4a338f3780b35fdeee11e6bb445f13bdc4",
        "logIndex": 180,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0xf29fAB65f4E6123e85D11D542Cc4933EaA543615",
        "topics": [
          "0xdaffa4de8807a37aaf10d8a67851ece24bdb59211b326eb514393692ddc95832"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 181,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      },
      {
        "transactionIndex": 40,
        "blockNumber": 50389170,
        "transactionHash": "0x9771b7be0091c5941cfbf6e92381e247f2d10d6c68f37af30c2275a0b2ea225b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006f368f8e9828d6f9530fd3e2300c2376312df1a6",
          "0x00000000000000000000000083d69448f88bf9c701c1b93f43e1f753d39b2632"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001795f99b54fd11e0000000000000000000000000000000000000000000000008b974b62e0415e350000000000000000000000000000000000000000000004e89b4968df22e787400000000000000000000000000000000000000000000000008a1debc92af18d170000000000000000000000000000000000000000000004e89cc2c878d837585e",
        "logIndex": 182,
        "blockHash": "0x064ad46ebba4d638b60d290ceebcd6686cd54d53ccaba4b21607c0677fa08d48"
      }
    ],
    "blockNumber": 50389170,
    "cumulativeGasUsed": "10547448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "0xe25D3fd9dcd38450D8A155441801801046b662a1",
    "0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17",
    "0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17",
    "0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17",
    "0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17",
    "1000000",
    "1000000000000000000",
    "0xAbfB6C4a338f3780b35FdEEE11e6bB445F13BDc4",
    1
  ],
  "solcInputHash": "30ffbd4cf1654f46dfb7ab44eb0c50a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rwa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_kycRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kycRequirementGroup\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeaturePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KYCCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RWACannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemerNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistryZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnAlreadyValidated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositAmount\",\"type\":\"uint256\"}],\"name\":\"DepositorOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"KYCRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRequirementGroup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequirementGroup\",\"type\":\"uint256\"}],\"name\":\"KYCRequirementGroupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedemptionAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"NewPricerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"OffChainRedemptionMinimumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRWATokenAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRWATokenAmountBurned\",\"type\":\"uint256\"}],\"name\":\"RedeemerOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedemptionProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountIn\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"RedemptionRequestedServicedOffChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ID_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_PROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaAmountToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addRedemptionProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositIdToDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDepositedMinusFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRegistry\",\"outputs\":[{\"internalType\":\"contract IKYCRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRequirementGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumOffChainRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainRedemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redemptionIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IPricerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redemptionIdToRedeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRwaTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRWATokenToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"requestRedemptionServicedOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwa\",\"outputs\":[{\"internalType\":\"contract IRWALike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"setAssetSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycRegistry\",\"type\":\"address\"}],\"name\":\"setKYCRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kycRequirementGroup\",\"type\":\"uint256\"}],\"name\":\"setKYCRequirementGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRedemptionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumOffChainRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setOffChainRedemptionMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RedemptionProofAdded(bytes32,address,uint256,uint256)\":{\"params\":{\"rwaAmountBurned\":\"Amount of OMMF burned\",\"timestamp\":\"Timestamp of the redemption\",\"txHash\":\"Tx hash (redemption id) of the redemption transfer\",\"user\":\"Address of the user who made the redemption\"}}},\"kind\":\"dev\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`\",\"params\":{\"depositAmountAfterFee\":\"The amount of the deposit after fees\",\"feeAmount\":\"The amount of the fees taken\",\"timestamp\":\"The timestamp of the deposit\",\"txHash\":\"The transaction hash of the deposit\",\"user\":\"The address of the user who made the deposit\"}},\"addRedemptionProof(bytes32,address,uint256,uint256)\":{\"params\":{\"rwaAmountToBurn\":\"The amount of OMMF burned\",\"timestamp\":\"The timestamp of the redemption request\",\"txHash\":\"The tx hash (redemption Id) of the redemption\",\"user\":\"The address of the user who made the redemption\"}},\"claimMint(bytes32[])\":{\"details\":\"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint\",\"params\":{\"depositIds\":\"An array containing the deposit Ids one wishes to claim\"}},\"claimRedemption(bytes32[])\":{\"details\":\"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption\",\"params\":{\"redemptionIds\":\"an Array of redemption Id's which ought to fulfilled\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"params\":{\"depositAmountAfterFee\":\"The deposit value for the new entry\",\"depositIdToOverwrite\":\"The depositId of the entry we wish to                              overwrite\",\"priceId\":\"The priceId to be associated with the new                              entry\",\"user\":\"The user for the new entry\"}},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"params\":{\"priceId\":\"The priceID to be associated with the new                                entry\",\"redemptionIdToOverwrite\":\"The redemptionId of the entry we wish to                                overwrite\",\"rwaTokenAmountBurned\":\"The burn amount for the new entry\",\"user\":\"The user for the new entry\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requestRedemption(uint256)\":{\"params\":{\"amount\":\"The amount (in units of `rwa`) that a user wishes to redeem               from the fund\"}},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"params\":{\"amountRWATokenToRedeem\":\"The requested redemption amount\",\"offChainDestination\":\"A hash of the destination to which                               the request should be serviced to.\"}},\"requestSubscription(uint256)\":{\"params\":{\"amount\":\"The amount of collateral one wished to deposit\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAssetSender(address)\":{\"params\":{\"newAssetSender\":\"The address of the new `assetSender`\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"The address of the new `feeRecipient`\"}},\"setKYCRegistry(address)\":{\"params\":{\"_kycRegistry\":\"The new KYC registry address\"}},\"setKYCRequirementGroup(uint256)\":{\"params\":{\"_kycRequirementGroup\":\"The new KYC requirement group\"}},\"setMinimumDepositAmount(uint256)\":{\"params\":{\"minDepositAmount\":\"The minimum amount required to submit a deposit                         request\"}},\"setMinimumRedemptionAmount(uint256)\":{\"params\":{\"_minimumRedemptionAmount\":\"The minimum amount required to submit a                                 redemption request\"}},\"setMintFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_mintFee\":\"The new mint fee specified in basis points\"}},\"setOffChainRedemptionMinimum(uint256)\":{\"params\":{\"_minimumOffChainRedemptionAmount\":\"The new minimum off chain                                         redemption amount\"}},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"details\":\"Array size must match\",\"params\":{\"depositIds\":\"an Array of deposit Ids to be associated\",\"priceIds\":\"an Array of price Ids to be associated\"}},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"params\":{\"priceIds\":\"an Array of priceIds to associate\",\"redemptionIds\":\"an Array of redemptionIds to associate\"}},\"setPricer(address)\":{\"params\":{\"newPricer\":\"The address of the new pricer contract\"}},\"setRedemptionFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_redemptionFee\":\"The new redeem fee specified in basis points\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PriceIdNotSet()\":[{\"notice\":\"ERRORS ///\"}],\"RegistryZeroAddress()\":[{\"notice\":\"Error for when caller attempts to set the KYC registry refernce         to the zero address.\"}]},\"events\":{\"AssetSenderSet(address,address)\":{\"notice\":\"Event emitted when the assetSender is changed\"},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when deposit proof has been added\"},\"FeeRecipientSet(address,address)\":{\"notice\":\"Event emitted when fee recipient is set\"},\"MinimumDepositAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when minimum deposit amount is set\"},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when a new redeem minimum is set.         All units are in 1e18\"},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a Mint request is completed\"},\"MintFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when mint fee is set\"},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a mint request is submitted\"},\"NewPricerSet(address,address)\":{\"notice\":\"Event emitted when a new Pricer contract is set\"},\"OffChainRedemptionMinimumSet(uint256,uint256)\":{\"notice\":\"Event emitted when the off chain redemption minimum is         updated\"},\"OffChainRedemptionPaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         paused\"},\"OffChainRedemptionUnpaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         unpaused\"},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"notice\":\"Event emitted when a deposit has its corresponding priceId set\"},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"notice\":\"Event Emitted when a redemption has its corresponding priceId set\"},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a redemption request is completed\"},\"RedemptionFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when redeem fee is set\"},\"RedemptionPaused(address)\":{\"notice\":\"Event emitted when redemptions are paused\"},\"RedemptionProofAdded(bytes32,address,uint256,uint256)\":{\"notice\":\"Event emitted when redemption proof has been added\"},\"RedemptionRequested(address,bytes32,uint256)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionUnpaused(address)\":{\"notice\":\"Event emitted when redemptions are unpaused\"},\"SubscriptionPaused(address)\":{\"notice\":\"Event emitted when subscriptions are paused\"},\"SubscriptionUnpaused(address)\":{\"notice\":\"Event emitted when subscriptions are unpaused\"}},\"kind\":\"user\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Adds a deposit proof to the contract\"},\"addRedemptionProof(bytes32,address,uint256,uint256)\":{\"notice\":\"Function to add a redemption proof to the contract\"},\"claimMint(bytes32[])\":{\"notice\":\"Function used to claim tokens corresponding to a deposit request\"},\"claimRedemption(bytes32[])\":{\"notice\":\"Function to claim collateral corresponding to a redemption request\"},\"kycRegistry()\":{\"notice\":\"Returns reference to the KYC registry that this client queries\"},\"kycRequirementGroup()\":{\"notice\":\"Returns what KYC group this client checks accounts for\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the depoitIdToDepositor         mapping\"},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping\"},\"pauseOffChainRedemption()\":{\"notice\":\"Function to pause off chain redemptoins\"},\"pauseRedemption()\":{\"notice\":\"Function to pause redemptions to RWAHub\"},\"pauseSubscription()\":{\"notice\":\"Function to pause subscription to RWAHub\"},\"requestRedemption(uint256)\":{\"notice\":\"Function used by users to request a redemption from the fund\"},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"notice\":\"Request a redemption to be serviced off chain.\"},\"requestSubscription(uint256)\":{\"notice\":\"Function used by users to request subscription to the fund\"},\"setAssetSender(address)\":{\"notice\":\"Admin function to set the address of `assetSender`\"},\"setFeeRecipient(address)\":{\"notice\":\"Admin function to set the address of `feeRecipient`\"},\"setKYCRegistry(address)\":{\"notice\":\"Update KYC registry address\"},\"setKYCRequirementGroup(uint256)\":{\"notice\":\"Update KYC group of the contract for which         accounts are checked against\"},\"setMinimumDepositAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount required for a deposit\"},\"setMinimumRedemptionAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount to redeem\"},\"setMintFee(uint256)\":{\"notice\":\"Admin function to set the mint fee\"},\"setOffChainRedemptionMinimum(uint256)\":{\"notice\":\"Admin Function to set the minimum off chain redemption amount\"},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate a depositId with a given Price Id\"},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate redemptionId with a given priceId\"},\"setPricer(address)\":{\"notice\":\"Admin function to set the address of the Pricer contract\"},\"setRedemptionFee(uint256)\":{\"notice\":\"Admin function to set the redeem fee\"},\"unpauseOffChainRedemption()\":{\"notice\":\"Function to unpause off chain redemptoins\"},\"unpauseRedemption()\":{\"notice\":\"Function to unpause redemptions to RWAHub\"},\"unpauseSubscription()\":{\"notice\":\"Function to unpause subscriptions to RWAHub\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ousg/ousgManager.sol\":\"OUSGManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/RWAHub.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IPricerReader.sol\\\";\\nimport \\\"contracts/interfaces/IRWALike.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHub.sol\\\";\\n\\n// Additional Dependencies\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract RWAHub is IRWAHub, ReentrancyGuard, AccessControlEnumerable {\\n  using SafeERC20 for IERC20;\\n  // RWA Token contract\\n  IRWALike public immutable rwa;\\n  // Pointer to Pricer\\n  IPricerReader public pricer;\\n  // Address to receive deposits\\n  address public constant assetRecipient = 0x3d7a5eDFCDCA0f9FDD066Fb94D306f2b4Cc7DB17; // Polygon Dev Multisig\\n  // Address to send redemptions\\n  address public assetSender;\\n  // Address fee recipient\\n  address public feeRecipient;\\n  // Mapping from deposit Id -> Depositor\\n  mapping(bytes32 => Depositor) public depositIdToDepositor;\\n  // Mapping from redemptionId -> Redeemer\\n  mapping(bytes32 => Redeemer) public redemptionIdToRedeemer;\\n\\n  /// @dev Mint/Redeem Parameters\\n  // Minimum amount that must be deposited to mint the RWA token\\n  // Denoted in decimals of `collateral`\\n  uint256 public minimumDepositAmount;\\n\\n  // Minimum amount that must be redeemed for a withdraw request\\n  uint256 public minimumRedemptionAmount;\\n\\n  // Minting fee specified in basis points\\n  uint256 public mintFee = 0;\\n\\n  // Redemption fee specified in basis points\\n  uint256 public redemptionFee = 0;\\n\\n  // The asset accepted by the RWAHub\\n  IERC20 public immutable collateral;\\n\\n  // Decimal multiplier representing the difference between `rwa` decimals\\n  // In `collateral` token decimals\\n  uint256 public immutable decimalsMultiplier;\\n\\n  // Deposit counter to map subscription requests to\\n  uint256 public subscriptionRequestCounter = 1;\\n\\n  // Redemption Id to map from\\n  uint256 public redemptionRequestCounter = 1;\\n\\n  // Helper constant that allows us to specify basis points in calculations\\n  uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n  // Pause variables\\n  bool public redemptionPaused;\\n  bool public subscriptionPaused;\\n\\n  /// @dev Role based access control roles\\n  bytes32 public constant MANAGER_ADMIN = keccak256(\\\"MANAGER_ADMIN\\\");\\n  bytes32 public constant PAUSER_ADMIN = keccak256(\\\"PAUSER_ADMIN\\\");\\n  bytes32 public constant PRICE_ID_SETTER_ROLE =\\n    keccak256(\\\"PRICE_ID_SETTER_ROLE\\\");\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n  /// @notice constructor\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  ) {\\n    if (_collateral == address(0)) {\\n      revert CollateralCannotBeZero();\\n    }\\n    if (_rwa == address(0)) {\\n      revert RWACannotBeZero();\\n    }\\n    if (_assetSender == address(0)) {\\n      revert AssetSenderCannotBeZero();\\n    }\\n    if (_feeRecipient == address(0)) {\\n      revert FeeRecipientCannotBeZero();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\\n    _grantRole(MANAGER_ADMIN, managerAdmin);\\n    _grantRole(PAUSER_ADMIN, pauser);\\n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\\n    _setRoleAdmin(PRICE_ID_SETTER_ROLE, MANAGER_ADMIN);\\n    _setRoleAdmin(RELAYER_ROLE, MANAGER_ADMIN);\\n\\n    collateral = IERC20(_collateral);\\n    rwa = IRWALike(_rwa);\\n    feeRecipient = _feeRecipient;\\n    assetSender = _assetSender;\\n    minimumDepositAmount = _minimumDepositAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n\\n    decimalsMultiplier =\\n      10 **\\n        (IERC20Metadata(_rwa).decimals() -\\n          IERC20Metadata(_collateral).decimals());\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  Subscription/Redemption Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Function used by users to request subscription to the fund\\n   *\\n   * @param amount The amount of collateral one wished to deposit\\n   */\\n  function requestSubscription(\\n    uint256 amount\\n  )\\n    external\\n    virtual\\n    nonReentrant\\n    ifNotPaused(subscriptionPaused)\\n    checkRestrictions(msg.sender)\\n  {\\n    if (amount < minimumDepositAmount) {\\n      revert DepositTooSmall();\\n    }\\n\\n    uint256 feesInCollateral = _getMintFees(amount);\\n    uint256 depositAmountAfterFee = amount - feesInCollateral;\\n\\n    // Link the depositor to their deposit ID\\n    bytes32 depositId = bytes32(subscriptionRequestCounter++);\\n    depositIdToDepositor[depositId] = Depositor(\\n      msg.sender,\\n      depositAmountAfterFee,\\n      0\\n    );\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositAmountAfterFee\\n    );\\n\\n    emit MintRequested(\\n      msg.sender,\\n      depositId,\\n      amount,\\n      depositAmountAfterFee,\\n      feesInCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used to claim tokens corresponding to a deposit request\\n   *\\n   * @param depositIds An array containing the deposit Ids one wishes to claim\\n   *\\n   * @dev Implicitly does all transfer checks present in underlying `rwa`\\n   * @dev The priceId corresponding to a given depositId must be set prior to\\n   *      claiming a mint\\n   */\\n  function claimMint(\\n    bytes32[] calldata depositIds\\n  ) external virtual nonReentrant ifNotPaused(subscriptionPaused) {\\n    uint256 depositsSize = depositIds.length;\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      _claimMint(depositIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal claim mint helper\\n   *\\n   * @dev This function can be overriden to implement custom claiming logic\\n   */\\n  function _claimMint(bytes32 depositId) internal virtual {\\n    Depositor memory depositor = depositIdToDepositor[depositId];\\n    // Revert if priceId is not set\\n    if (depositor.priceId == 0) {\\n      revert PriceIdNotSet();\\n    }\\n\\n    uint256 price = pricer.getPrice(depositor.priceId);\\n    uint256 rwaOwed = _getMintAmountForPrice(\\n      depositor.amountDepositedMinusFees,\\n      price\\n    );\\n\\n    delete depositIdToDepositor[depositId];\\n    rwa.mint(depositor.user, rwaOwed);\\n\\n    emit MintCompleted(\\n      depositor.user,\\n      depositId,\\n      rwaOwed,\\n      depositor.amountDepositedMinusFees,\\n      price,\\n      depositor.priceId\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by users to request a redemption from the fund\\n   *\\n   * @param amount The amount (in units of `rwa`) that a user wishes to redeem\\n   *               from the fund\\n   */\\n  function requestRedemption(\\n    uint256 amount\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    if (amount < minimumRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n    redemptionIdToRedeemer[redemptionId] = Redeemer(msg.sender, amount, 0);\\n\\n    rwa.burnFrom(msg.sender, amount);\\n\\n    emit RedemptionRequested(msg.sender, redemptionId, amount);\\n  }\\n\\n  /**\\n   * @notice Function to claim collateral corresponding to a redemption request\\n   *\\n   * @param redemptionIds an Array of redemption Id's which ought to fulfilled\\n   *\\n   * @dev Implicitly does all checks present in underlying `rwa`\\n   * @dev The price Id corresponding to a redemptionId must be set prior to\\n   *      claiming a redemption\\n   */\\n  function claimRedemption(\\n    bytes32[] calldata redemptionIds\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    uint256 fees;\\n    uint256 redemptionsSize = redemptionIds.length;\\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\\n      Redeemer memory member = redemptionIdToRedeemer[redemptionIds[i]];\\n      _checkRestrictions(member.user);\\n      if (member.priceId == 0) {\\n        // Then the price for this redemption has not been set\\n        revert PriceIdNotSet();\\n      }\\n\\n      // Calculate collateral due and fees\\n      uint256 price = pricer.getPrice(member.priceId);\\n      uint256 collateralDue = _getRedemptionAmountForRwa(\\n        member.amountRwaTokenBurned,\\n        price\\n      );\\n      uint256 fee = _getRedemptionFees(collateralDue);\\n      uint256 collateralDuePostFees = collateralDue - fee;\\n      fees += fee;\\n\\n      delete redemptionIdToRedeemer[redemptionIds[i]];\\n\\n      collateral.safeTransferFrom(\\n        assetSender,\\n        member.user,\\n        collateralDuePostFees\\n      );\\n\\n      emit RedemptionCompleted(\\n        member.user,\\n        redemptionIds[i],\\n        member.amountRwaTokenBurned,\\n        collateralDuePostFees,\\n        fee,\\n        price,\\n        member.priceId\\n      );\\n    }\\n    if (fees > 0) {\\n      collateral.safeTransferFrom(assetSender, feeRecipient, fees);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         Relayer Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Adds a deposit proof to the contract\\n   *\\n   * @param txHash                The transaction hash of the deposit\\n   * @param user                  The address of the user who made the deposit\\n   * @param depositAmountAfterFee The amount of the deposit after fees\\n   * @param feeAmount             The amount of the fees taken\\n   * @param timestamp             The timestamp of the deposit\\n   *\\n   * @dev txHash is used as the depositId in storage\\n   * @dev All amounts are in decimals of `collateral`\\n   */\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external override onlyRole(RELAYER_ROLE) checkRestrictions(user) {\\n    if (depositIdToDepositor[txHash].user != address(0)) {\\n      revert DepositProofAlreadyExists();\\n    }\\n    depositIdToDepositor[txHash] = Depositor(user, depositAmountAfterFee, 0);\\n    emit DepositProofAdded(\\n      txHash,\\n      user,\\n      depositAmountAfterFee,\\n      feeAmount,\\n      timestamp\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           PriceId Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to associate a depositId with a given Price Id\\n   *\\n   * @param depositIds an Array of deposit Ids to be associated\\n   * @param priceIds   an Array of price Ids to be associated\\n   *\\n   * @dev Array size must match\\n   */\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) public virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 depositsSize = depositIds.length;\\n    if (depositsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      if (depositIdToDepositor[depositIds[i]].user == address(0)) {\\n        revert DepositorNull();\\n      }\\n      if (depositIdToDepositor[depositIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      depositIdToDepositor[depositIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForDeposit(depositIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to associate redemptionId with a given priceId\\n   *\\n   * @param redemptionIds an Array of redemptionIds to associate\\n   * @param priceIds  an Array of priceIds to associate\\n   */\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) public virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 redemptionsSize = redemptionIds.length;\\n    if (redemptionsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\\n      if (redemptionIdToRedeemer[redemptionIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      redemptionIdToRedeemer[redemptionIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForRedemption(redemptionIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Admin Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the depoitIdToDepositor\\n   *         mapping\\n   *\\n   * @param depositIdToOverwrite  The depositId of the entry we wish to\\n   *                              overwrite\\n   * @param user                  The user for the new entry\\n   * @param depositAmountAfterFee The deposit value for the new entry\\n   * @param priceId               The priceId to be associated with the new\\n   *                              entry\\n   */\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverwrite,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) checkRestrictions(user) {\\n    Depositor memory oldDepositor = depositIdToDepositor[depositIdToOverwrite];\\n\\n    depositIdToDepositor[depositIdToOverwrite] = Depositor(\\n      user,\\n      depositAmountAfterFee,\\n      priceId\\n    );\\n\\n    emit DepositorOverwritten(\\n      depositIdToOverwrite,\\n      oldDepositor.user,\\n      user,\\n      oldDepositor.priceId,\\n      priceId,\\n      oldDepositor.amountDepositedMinusFees,\\n      depositAmountAfterFee\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the redemptionIdToRedeemer\\n   *         mapping\\n   *\\n   * @param redemptionIdToOverwrite The redemptionId of the entry we wish to\\n   *                                overwrite\\n   * @param user                    The user for the new entry\\n   * @param rwaTokenAmountBurned    The burn amount for the new entry\\n   * @param priceId                 The priceID to be associated with the new\\n   *                                entry\\n   */\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverwrite,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) checkRestrictions(user) {\\n    Redeemer memory oldRedeemer = redemptionIdToRedeemer[\\n      redemptionIdToOverwrite\\n    ];\\n    redemptionIdToRedeemer[redemptionIdToOverwrite] = Redeemer(\\n      user,\\n      rwaTokenAmountBurned,\\n      priceId\\n    );\\n    emit RedeemerOverwritten(\\n      redemptionIdToOverwrite,\\n      oldRedeemer.user,\\n      user,\\n      oldRedeemer.priceId,\\n      priceId,\\n      oldRedeemer.amountRwaTokenBurned,\\n      rwaTokenAmountBurned\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount to redeem\\n   *\\n   * @param _minimumRedemptionAmount The minimum amount required to submit a\\n   *                                 redemption request\\n   */\\n  function setMinimumRedemptionAmount(\\n    uint256 _minimumRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_minimumRedemptionAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldRedeemMinimum = minimumRedemptionAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n    emit MinimumRedemptionAmountSet(oldRedeemMinimum, _minimumRedemptionAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount required for a deposit\\n   *\\n   * @param minDepositAmount The minimum amount required to submit a deposit\\n   *                         request\\n   */\\n  function setMinimumDepositAmount(\\n    uint256 minDepositAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (minDepositAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\\n    minimumDepositAmount = minDepositAmount;\\n    emit MinimumDepositAmountSet(oldMinimumDepositAmount, minDepositAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the mint fee\\n   *\\n   * @param _mintFee The new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setMintFee(uint256 _mintFee) external onlyRole(MANAGER_ADMIN) {\\n    if (_mintFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldMintFee = mintFee;\\n    mintFee = _mintFee;\\n    emit MintFeeSet(oldMintFee, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the redeem fee\\n   *\\n   * @param _redemptionFee The new redeem fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setRedemptionFee(\\n    uint256 _redemptionFee\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_redemptionFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldRedeemFee = redemptionFee;\\n    redemptionFee = _redemptionFee;\\n    emit RedemptionFeeSet(oldRedeemFee, _redemptionFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of the Pricer contract\\n   *\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  function setPricer(address newPricer) external onlyRole(MANAGER_ADMIN) {\\n    address oldPricer = address(pricer);\\n    pricer = IPricerReader(newPricer);\\n    emit NewPricerSet(oldPricer, newPricer);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `feeRecipient`\\n   *\\n   * @param newFeeRecipient The address of the new `feeRecipient`\\n   */\\n  function setFeeRecipient(\\n    address newFeeRecipient\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldFeeRecipient = feeRecipient;\\n    feeRecipient = newFeeRecipient;\\n    emit FeeRecipientSet(oldFeeRecipient, feeRecipient);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `assetSender`\\n   *\\n   * @param newAssetSender The address of the new `assetSender`\\n   */\\n  function setAssetSender(\\n    address newAssetSender\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldAssetSender = assetSender;\\n    assetSender = newAssetSender;\\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Pause Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check if a feature is paused\\n   *\\n   * @param feature The feature to check if paused\\n   */\\n  modifier ifNotPaused(bool feature) {\\n    if (feature) {\\n      revert FeaturePaused();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Function to pause subscription to RWAHub\\n   */\\n  function pauseSubscription() external onlyRole(PAUSER_ADMIN) {\\n    subscriptionPaused = true;\\n    emit SubscriptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to pause redemptions to RWAHub\\n   */\\n  function pauseRedemption() external onlyRole(PAUSER_ADMIN) {\\n    redemptionPaused = true;\\n    emit RedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause subscriptions to RWAHub\\n   */\\n  function unpauseSubscription() external onlyRole(MANAGER_ADMIN) {\\n    subscriptionPaused = false;\\n    emit SubscriptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause redemptions to RWAHub\\n   */\\n  function unpauseRedemption() external onlyRole(MANAGER_ADMIN) {\\n    redemptionPaused = false;\\n    emit RedemptionUnpaused(msg.sender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                      Check Restriction Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check restrictions status of an account\\n   *\\n   * @param account The account to check\\n   */\\n  modifier checkRestrictions(address account) {\\n    _checkRestrictions(account);\\n    _;\\n  }\\n\\n  /**\\n   * @notice internal function to check restriction status\\n   *         of an address\\n   *\\n   * @param account The account to check restriction status for\\n   *\\n   * @dev This function is virtual to be overridden by child contract\\n   *      to check restrictions on a more granular level\\n   */\\n  function _checkRestrictions(address account) internal view virtual;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Math Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   *\\n   * @param collateralAmount Amount `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getMintFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   * @param collateralAmount Amount of `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getRedemptionFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * redemptionFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given a deposit amount and priceId, returns the amount\\n   *         of `rwa` due\\n   *\\n   * @param depositAmt The amount deposited in units of `collateral`\\n   * @param price      The price associated with this deposit\\n   */\\n  function _getMintAmountForPrice(\\n    uint256 depositAmt,\\n    uint256 price\\n  ) internal view returns (uint256 rwaAmountOut) {\\n    uint256 amountE36 = _scaleUp(depositAmt) * 1e18;\\n    // Will revert with div by 0 if price not defined for a priceId\\n    rwaAmountOut = amountE36 / price;\\n  }\\n\\n  /**\\n   * @notice Given a redemption amount and a priceId, returns the amount\\n   *         of `collateral` due\\n   *\\n   * @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\\n   * @param price                The price associated with this redemption\\n   */\\n  function _getRedemptionAmountForRwa(\\n    uint256 rwaTokenAmountBurned,\\n    uint256 price\\n  ) internal view returns (uint256 collateralOwed) {\\n    uint256 amountE36 = rwaTokenAmountBurned * price;\\n    collateralOwed = _scaleDown(amountE36 / 1e18);\\n  }\\n\\n  /**\\n   * @notice Scale provided amount up by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting the collateral's decimals\\n   *      representation to the RWA amount decimals representation.\\n   */\\n  function _scaleUp(uint256 amount) internal view returns (uint256) {\\n    return amount * decimalsMultiplier;\\n  }\\n\\n  /**\\n   * @notice Scale provided amount down by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting `rwa`'s decimal\\n   *      representation to the `collateral`'s decimal representation\\n   */\\n  function _scaleDown(uint256 amount) internal view returns (uint256) {\\n    return amount / decimalsMultiplier;\\n  }\\n}\\n\",\"keccak256\":\"0xf16817e5930bad79dab3d153e883b15be848e8b8ec4bedd6beee953071effceb\",\"license\":\"BUSL-1.1\"},\"contracts/RWAHubOffChainRedemptions.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/RWAHub.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\\\";\\n\\nabstract contract RWAHubOffChainRedemptions is\\n  RWAHub,\\n  IRWAHubOffChainRedemptions\\n{\\n  // To enable and disable off chain redemptions\\n  bool public offChainRedemptionPaused;\\n\\n  // Minimum off chain redemption amount\\n  uint256 public minimumOffChainRedemptionAmount;\\n\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  )\\n    RWAHub(\\n      _collateral,\\n      _rwa,\\n      managerAdmin,\\n      pauser,\\n      _assetSender,\\n      _feeRecipient,\\n      _minimumDepositAmount,\\n      _minimumRedemptionAmount\\n    )\\n  {\\n    // Default to the same minimum redemption amount as for On-Chain\\n    // redemptions.\\n    minimumOffChainRedemptionAmount = _minimumRedemptionAmount;\\n  }\\n\\n  /**\\n   * @notice Request a redemption to be serviced off chain.\\n   *\\n   * @param amountRWATokenToRedeem The requested redemption amount\\n   * @param offChainDestination    A hash of the destination to which\\n   *                               the request should be serviced to.\\n   */\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external nonReentrant ifNotPaused(offChainRedemptionPaused) {\\n    if (amountRWATokenToRedeem < minimumOffChainRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n\\n    rwa.burnFrom(msg.sender, amountRWATokenToRedeem);\\n\\n    emit RedemptionRequestedServicedOffChain(\\n      msg.sender,\\n      redemptionId,\\n      amountRWATokenToRedeem,\\n      offChainDestination\\n    );\\n  }\\n\\n  /**\\n   * @notice Function to pause off chain redemptoins\\n   */\\n  function pauseOffChainRedemption() external onlyRole(PAUSER_ADMIN) {\\n    offChainRedemptionPaused = true;\\n    emit OffChainRedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause off chain redemptoins\\n   */\\n  function unpauseOffChainRedemption() external onlyRole(MANAGER_ADMIN) {\\n    offChainRedemptionPaused = false;\\n    emit OffChainRedemptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Admin Function to set the minimum off chain redemption amount\\n   *\\n   * @param _minimumOffChainRedemptionAmount The new minimum off chain\\n   *                                         redemption amount\\n   */\\n  function setOffChainRedemptionMinimum(\\n    uint256 _minimumOffChainRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldMinimum = minimumOffChainRedemptionAmount;\\n    minimumOffChainRedemptionAmount = _minimumOffChainRedemptionAmount;\\n    emit OffChainRedemptionMinimumSet(\\n      oldMinimum,\\n      _minimumOffChainRedemptionAmount\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd0c5dec611e30f6036c2f3ebf3f3a6f74a9dd13a6b3317e859d332d64b0119ad\",\"license\":\"BUSL-1.1\"},\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\",\"keccak256\":\"0xf0155eaa75c379807c202eb9a0db8a073e5d93d6f9144b42d194c2ecd49ddb33\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x0134fde2cc9450792bc761f05588383e3b1baf78454dba8b6a592dd39895cd08\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x099220ebd191f57aa291f8c00866eb8c943680d9790d46ec82010b933d68550f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d9d09b80a08d34c67244192d626551d2d4921328ac5aa3f0839e7daa48ac6c0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"},\"contracts/interfaces/IPricer.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\ninterface IPricer {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n\\n  /**\\n   * @notice Adds a price to the pricer\\n   *\\n   * @param price     The price to add\\n   * @param timestamp The timestamp associated with the price\\n   *\\n   * @dev Updates the oracle price if price is the latest\\n   */\\n  function addPrice(uint256 price, uint256 timestamp) external;\\n\\n  /**\\n   * @notice Updates a price in the pricer\\n   *\\n   * @param priceId The priceId to update\\n   * @param price   The price to set\\n   */\\n  function updatePrice(uint256 priceId, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x86b30eec3b7756f1f1ed5347b93365f852ef7f837c080a37cc8c865fd1734f42\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPricerReader.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\ninterface IPricerReader {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbdd70fbfe6acfdaaad329fece3dab6372f1fe4f1e37ca8b3a9b55b102e119bcf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPricerWithOracle.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IPricer.sol\\\";\\n\\ninterface IPricerWithOracle is IPricer {\\n  /**\\n   * @dev Deletes a price from the contract.\\n   * @param priceId The ID of the price to be deleted.\\n   * Emits a {PriceDeleted} event.\\n   * Requirements:\\n   * - The caller must have the `DEFAULT_ADMIN_ROLE`.\\n   * - The price ID must exist.\\n   */\\n  function deletePrice(uint256 priceId) external;\\n\\n  /**\\n   * @dev Checks if the given priceIds are valid by verifying that their corresponding prices were updated\\n   * within the last `maxTimestampDiff` seconds.\\n   * @param priceIds An array of priceIds to check validity for.\\n   * @return A boolean indicating whether all the given priceIds are valid or not.\\n   */\\n  function isValid(uint256[] calldata priceIds) external view returns (bool);\\n\\n  /**\\n   * @dev Adds a new price and timestamp to the price history, subject to certain conditions.\\n   * Only callable by an account with the `ADD_PRICE_OPS_ROLE` role.\\n   * @param price The new price to add.\\n   * @param timestamp The timestamp at which the price was recorded.\\n   * Emits a {PriceChangeTooLarge}, {TimeStampInFuture}, {TimeStampTooOld}, or {StaleOraclePrice} error if the conditions are not met.\\n   */\\n  function addPriceOps(uint256 price, uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0x8ea0c10e2cc9681c9204113bab232bb6e84d5887cc976ac7e2e10d38ba5c805a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRWAHub.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n */\\npragma solidity 0.8.16;\\n\\ninterface IRWAHub {\\n  // Struct to contain the deposit information for a given depositId\\n  struct Depositor {\\n    address user;\\n    uint256 amountDepositedMinusFees;\\n    uint256 priceId;\\n  }\\n\\n  // Struc to contain withdrawal infromation for a given redemptionId\\n  struct Redeemer {\\n    address user;\\n    uint256 amountRwaTokenBurned;\\n    uint256 priceId;\\n  }\\n\\n  function requestSubscription(uint256 amount) external;\\n\\n  function claimMint(bytes32[] calldata depositIds) external;\\n\\n  function requestRedemption(uint256 amount) external;\\n\\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\\n\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external;\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPricer(address newPricer) external;\\n\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverride,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external;\\n\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverride,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedemptionMin The old redeem minimum value\\n   * @param newRedemptionMin The new redeem minimum value\\n   */\\n  event MinimumRedemptionAmountSet(\\n    uint256 oldRedemptionMin,\\n    uint256 newRedemptionMin\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redeem fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev see inheriting contract for decimal representation\\n   */\\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param redemptionId The id corresponding to a given redemption\\n   * @param rwaAmountIn  The amount of cash being burned\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountIn\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param depositId                 The depositId of the request\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param redemptionId             The id corresponding to a given redemption\\n   *                                 requested\\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param feeAmount                Amount of fees taken\\n   * @param price                    The price at which the redemption was\\n   *                                 serviced at\\n   * @param priceId                  The priceId of the used redemption price\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 feeAmount,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param depositId                 The depositId of the mint request\\n   * @param rwaAmountOut              The amount of RWA token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param price                     The price set for the given\\n   *                                  deposit id\\n   * @param priceId                   The priceId used to determine price\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 rwaAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a deposit has its corresponding priceId set\\n   *\\n   * @param depositIdSet The Deposit Id for which the price Id is being set\\n   * @param priceIdSet   The price Id being associate with a deposit Id\\n   */\\n  event PriceIdSetForDeposit(\\n    bytes32 indexed depositIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event Emitted when a redemption has its corresponding priceId set\\n   *\\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\\n   *                        set\\n   * @param priceIdSet      The Price Id being associated with a redemption Id\\n   */\\n  event PriceIdSetForRedemption(\\n    bytes32 indexed redemptionIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event emitted when a new Pricer contract is set\\n   *\\n   * @param oldPricer The address of the old pricer contract\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  event NewPricerSet(address oldPricer, address newPricer);\\n\\n  /**\\n   * @notice Event emitted when deposit proof has been added\\n   *\\n   * @param txHash                Tx hash of the deposit\\n   * @param user                  Address of the user who made the deposit\\n   * @param depositAmountAfterFee Amount of the deposit after fees\\n   * @param feeAmount             Amount of fees taken\\n   * @param timestamp             Timestamp of the deposit\\n   */\\n  event DepositProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when subscriptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event SubscriptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event RedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when subscriptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event SubscriptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event RedemptionUnpaused(address caller);\\n\\n  event DepositorOverwritten(\\n    bytes32 indexed depositId,\\n    address oldDepositor,\\n    address newDepositor,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldDepositAmount,\\n    uint256 newDepositAmount\\n  );\\n\\n  event RedeemerOverwritten(\\n    bytes32 indexed redemptionId,\\n    address oldRedeemer,\\n    address newRedeemer,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldRWATokenAmountBurned,\\n    uint256 newRWATokenAmountBurned\\n  );\\n\\n  /// ERRORS ///\\n  error PriceIdNotSet();\\n  error ArraySizeMismatch();\\n  error DepositTooSmall();\\n  error RedemptionTooSmall();\\n  error TxnAlreadyValidated();\\n  error CollateralCannotBeZero();\\n  error RWACannotBeZero();\\n  error AssetSenderCannotBeZero();\\n  error FeeRecipientCannotBeZero();\\n  error FeeTooLarge();\\n  error AmountTooSmall();\\n  error DepositorNull();\\n  error RedeemerNull();\\n  error DepositProofAlreadyExists();\\n  error RedemptionProofAlreadyExists();\\n  error FeaturePaused();\\n  error PriceIdAlreadySet();\\n}\\n\",\"keccak256\":\"0x9fb73ebcb82def579adb3edd0155b73337591b7e3a115531a9e63c90cc9118ea\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n */\\npragma solidity 0.8.16;\\n\\ninterface IRWAHubOffChainRedemptions {\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external;\\n\\n  function pauseOffChainRedemption() external;\\n\\n  function unpauseOffChainRedemption() external;\\n\\n  function setOffChainRedemptionMinimum(uint256 minimumAmount) external;\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user                The user submitting the offchain redemption request\\n   * @param redemptionId        The id corresponding to a given offchain redemption request\\n   * @param rwaTokenAmountIn    The amount of cash being burned\\n   * @param offChainDestination Hash of destination to which the request\\n   *                            should be serviced to\\n   */\\n  event RedemptionRequestedServicedOffChain(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaTokenAmountIn,\\n    bytes32 offChainDestination\\n  );\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event OffChainRedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event OffChainRedemptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption minimum is\\n   *         updated\\n   *\\n   * @param oldMinimum the old minimum redemption amount\\n   * @param newMinimum the new minimum redemption amount\\n   */\\n  event OffChainRedemptionMinimumSet(uint256 oldMinimum, uint256 newMinimum);\\n}\\n\",\"keccak256\":\"0x58dd3725089bd892ef426bf0c6f4ecb43da0aabe9000c9c7ece1fb44ac0d7066\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n */\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dc5e9e98d1a66c0b7708f5aeb874182fc0d03255c4d1bf97f8553f7e77dea71\",\"license\":\"BUSL-1.1\"},\"contracts/kyc/IKYCRegistry.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IKYCRegistry\\n * @author Ondo Finance\\n * @notice The interface for Ondo's KYC Registry contract\\n */\\ninterface IKYCRegistry {\\n  /**\\n   * @notice Retrieves KYC status of an account\\n   *\\n   * @param kycRequirementGroup The KYC group for which we wish to check\\n   * @param account             The account we wish to retrieve KYC status for\\n   *\\n   * @return bool Whether the `account` is KYC'd\\n   */\\n  function getKYCStatus(\\n    uint256 kycRequirementGroup,\\n    address account\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice View function for the public nested mapping of kycState\\n   *\\n   * @param kycRequirementGroup The KYC group to view\\n   * @param account             The account to check if KYC'd\\n   */\\n  function kycState(\\n    uint256 kycRequirementGroup,\\n    address account\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c74449a38afde17e85f4280155b7d6cbc5b9cb347f1d4836b68f8945844bc89\",\"license\":\"BUSL-1.1\"},\"contracts/kyc/IKYCRegistryClient.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/kyc/IKYCRegistry.sol\\\";\\n\\n/**\\n * @title IKYCRegistryClient\\n * @author Ondo Finance\\n * @notice The client interface Ondo's KYC Registry contract.\\n */\\ninterface IKYCRegistryClient {\\n  /// @notice Returns what KYC group this client checks accounts for\\n  function kycRequirementGroup() external view returns (uint256);\\n\\n  /// @notice Returns reference to the KYC registry that this client queries\\n  function kycRegistry() external view returns (IKYCRegistry);\\n\\n  /// @notice Sets the KYC group\\n  function setKYCRequirementGroup(uint256 group) external;\\n\\n  /// @notice Sets the KYC registry reference\\n  function setKYCRegistry(address registry) external;\\n\\n  /// @notice Error for when caller attempts to set the KYC registry refernce\\n  ///         to the zero address.\\n  error RegistryZeroAddress();\\n\\n  /**\\n   * @dev Event for when the KYC registry reference is set\\n   *\\n   * @param oldRegistry The old registry\\n   * @param newRegistry The new registry\\n   */\\n  event KYCRegistrySet(address oldRegistry, address newRegistry);\\n\\n  /**\\n   * @dev Event for when the KYC group for this client is set\\n   *\\n   * @param oldRequirementGroup The old KYC group\\n   * @param newRequirementGroup The new KYC group\\n   */\\n  event KYCRequirementGroupSet(\\n    uint256 oldRequirementGroup,\\n    uint256 newRequirementGroup\\n  );\\n}\\n\",\"keccak256\":\"0x97fd4b1b300677359d32a26e1e43f1f9039d421bb63bf9df1f1a2b26c2d567f8\",\"license\":\"BUSL-1.1\"},\"contracts/kyc/KYCRegistryClient.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/kyc/IKYCRegistry.sol\\\";\\nimport \\\"contracts/kyc/IKYCRegistryClient.sol\\\";\\n\\n/**\\n * @title KYCRegistryClient\\n * @author Ondo Finance\\n * @notice This abstract contract manages state required for clients\\n *         of the KYC registry.\\n */\\nabstract contract KYCRegistryClient is IKYCRegistryClient {\\n  // KYC Registry address\\n  IKYCRegistry public override kycRegistry;\\n  // KYC requirement group\\n  uint256 public override kycRequirementGroup;\\n\\n  /**\\n   * @notice Sets the KYC registry address for this client\\n   *\\n   * @param _kycRegistry The new KYC registry address\\n   */\\n  function _setKYCRegistry(address _kycRegistry) internal {\\n    if (_kycRegistry == address(0)) {\\n      revert RegistryZeroAddress();\\n    }\\n    address oldKYCRegistry = address(kycRegistry);\\n    kycRegistry = IKYCRegistry(_kycRegistry);\\n    emit KYCRegistrySet(oldKYCRegistry, _kycRegistry);\\n  }\\n\\n  /**\\n   * @notice Sets the KYC registry requirement group for this\\n   *         client to check kyc status for\\n   *\\n   * @param _kycRequirementGroup The new KYC group\\n   */\\n  function _setKYCRequirementGroup(uint256 _kycRequirementGroup) internal {\\n    uint256 oldKYCLevel = kycRequirementGroup;\\n    kycRequirementGroup = _kycRequirementGroup;\\n    emit KYCRequirementGroupSet(oldKYCLevel, _kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Checks whether an address has been KYC'd\\n   *\\n   * @param account The address to check\\n   */\\n  function _getKYCStatus(address account) internal view returns (bool) {\\n    return kycRegistry.getKYCStatus(kycRequirementGroup, account);\\n  }\\n\\n  function _getKYCStateDirect(address account) internal view returns (bool) {\\n    return kycRegistry.kycState(kycRequirementGroup, account);\\n  }\\n}\\n\",\"keccak256\":\"0xccc61d39b288a473a05153f7b7381867587e3e04fd16c0c603566f9169bb0bb6\",\"license\":\"BUSL-1.1\"},\"contracts/ousg/ousgManager.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/RWAHubOffChainRedemptions.sol\\\";\\nimport \\\"contracts/kyc/KYCRegistryClient.sol\\\";\\nimport \\\"contracts/interfaces/IPricerWithOracle.sol\\\";\\n\\ncontract OUSGManager is RWAHubOffChainRedemptions, KYCRegistryClient {\\n  bytes32 public constant REDEMPTION_PROVER_ROLE =\\n    keccak256(\\\"REDEMPTION_PROVER_ROLE\\\");\\n\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount,\\n    address _kycRegistry,\\n    uint256 _kycRequirementGroup\\n  )\\n    RWAHubOffChainRedemptions(\\n      _collateral,\\n      _rwa,\\n      managerAdmin,\\n      pauser,\\n      _assetSender,\\n      _feeRecipient,\\n      _minimumDepositAmount,\\n      _minimumRedemptionAmount\\n    )\\n  {\\n    _setKYCRegistry(_kycRegistry);\\n    _setKYCRequirementGroup(_kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Function to enforce KYC/AML requirements that will\\n   *         be implemented on calls to `requestSubscription` and\\n   *         `claimRedemption`\\n   *\\n   * @param account The account that we would like to check the KYC\\n   *                status for\\n   */\\n  function _checkRestrictions(address account) internal view override {\\n    // Check Basic KYC requirements for OMMF\\n    if (!_getKYCStatus(account)) {\\n      revert KYCCheckFailed();\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        KYC Registry Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Update KYC group of the contract for which\\n   *         accounts are checked against\\n   *\\n   * @param _kycRequirementGroup The new KYC requirement group\\n   */\\n  function setKYCRequirementGroup(\\n    uint256 _kycRequirementGroup\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    _setKYCRequirementGroup(_kycRequirementGroup);\\n  }\\n\\n  /**\\n   * @notice Function to add a redemption proof to the contract\\n   *\\n   * @param txHash           The tx hash (redemption Id) of the redemption\\n   * @param user             The address of the user who made the redemption\\n   * @param rwaAmountToBurn  The amount of OMMF burned\\n   * @param timestamp        The timestamp of the redemption request\\n   */\\n  function addRedemptionProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 rwaAmountToBurn,\\n    uint256 timestamp\\n  ) external onlyRole(REDEMPTION_PROVER_ROLE) checkRestrictions(user) {\\n    if (redemptionIdToRedeemer[txHash].user != address(0)) {\\n      revert RedemptionProofAlreadyExists();\\n    }\\n    if (rwaAmountToBurn == 0) {\\n      revert RedemptionTooSmall();\\n    }\\n    if (user == address(0)) {\\n      revert RedeemerNull();\\n    }\\n    rwa.burnFrom(msg.sender, rwaAmountToBurn);\\n    redemptionIdToRedeemer[txHash] = Redeemer(user, rwaAmountToBurn, 0);\\n\\n    emit RedemptionProofAdded(txHash, user, rwaAmountToBurn, timestamp);\\n  }\\n\\n  /**\\n   * @notice Update KYC registry address\\n   *\\n   * @param _kycRegistry The new KYC registry address\\n   */\\n  function setKYCRegistry(\\n    address _kycRegistry\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    _setKYCRegistry(_kycRegistry);\\n  }\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) public virtual override onlyRole(PRICE_ID_SETTER_ROLE) {\\n    if (!IPricerWithOracle(address(pricer)).isValid(priceIds)) {\\n      revert InvalidPriceId();\\n    }\\n    super.setPriceIdForDeposits(depositIds, priceIds);\\n  }\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) public virtual override onlyRole(PRICE_ID_SETTER_ROLE) {\\n    if (!IPricerWithOracle(address(pricer)).isValid(priceIds)) {\\n      revert InvalidPriceId();\\n    }\\n    super.setPriceIdForRedemptions(redemptionIds, priceIds);\\n  }\\n\\n  /**\\n   * @notice Event emitted when redemption proof has been added\\n   *\\n   * @param txHash                Tx hash (redemption id) of the redemption transfer\\n   * @param user                  Address of the user who made the redemption\\n   * @param rwaAmountBurned       Amount of OMMF burned\\n   * @param timestamp             Timestamp of the redemption\\n   */\\n  event RedemptionProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 rwaAmountBurned,\\n    uint256 timestamp\\n  );\\n\\n  error KYCCheckFailed();\\n  error InvalidPriceId();\\n}\\n\",\"keccak256\":\"0xfc849ba282985e029eb180478d70b22d63590a647f66c66ba4567f4e83ee22d3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040526000600a556000600b556001600c556001600d553480156200002557600080fd5b5060405162003c4238038062003c428339810160408190526200004891620005b7565b6001600055898989898989898987878787878787876001600160a01b038816620000855760405163a1aeceb760e01b815260040160405180910390fd5b6001600160a01b038716620000ad5760405163071aeb1d60e01b815260040160405180910390fd5b6001600160a01b038416620000d557604051633b2b1d5560e01b815260040160405180910390fd5b6001600160a01b038316620000fd57604051634fdcfc5560e11b815260040160405180910390fd5b6200010a60008762000346565b6200012560008051602062003c228339815191528762000346565b6200014060008051602062003c028339815191528662000346565b6200016a60008051602062003c0283398151915260008051602062003c2283398151915262000389565b620001a57f830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d60008051602062003c2283398151915262000389565b620001e07fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc460008051602062003c2283398151915262000389565b6001600160a01b0388811660a0819052888216608052600580546001600160a01b03199081168785161790915560048054909116928716929092178255600884905560098390556040805163313ce56760e01b81529051919263313ce5679282820192602092908290030181865afa15801562000261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028791906200066b565b876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ec91906200066b565b620002f89190620006ad565b6200030590600a620007c6565b60c052505050600f95909555506200032b9a508c995050620003d6975050505050505050565b620003368162000460565b50505050505050505050620007d7565b6200035d82826200049f60201b62001f0d1760201c565b60008281526002602090815260409091206200038491839062001f7862000528821b17901c565b505050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6001600160a01b038116620003fe57604051636ca1fdd760e01b815260040160405180910390fd5b601080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f7d25fe3c08dd306579e1d2a5002c9c44f52c27fc3754b43c75ef1e080d454c8a91015b60405180910390a15050565b601180549082905560408051828152602081018490527fdaffa4de8807a37aaf10d8a67851ece24bdb59211b326eb514393692ddc95832910162000454565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620005245760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b60006200053f836001600160a01b03841662000548565b90505b92915050565b6000818152600183016020526040812054620005915750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000542565b50600062000542565b80516001600160a01b0381168114620005b257600080fd5b919050565b6000806000806000806000806000806101408b8d031215620005d857600080fd5b620005e38b6200059a565b9950620005f360208c016200059a565b98506200060360408c016200059a565b97506200061360608c016200059a565b96506200062360808c016200059a565b95506200063360a08c016200059a565b945060c08b0151935060e08b01519250620006526101008c016200059a565b91506101208b015190509295989b9194979a5092959850565b6000602082840312156200067e57600080fd5b815160ff811681146200069057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111562000542576200054262000697565b600181815b808511156200070a578160001904821115620006ee57620006ee62000697565b80851615620006fc57918102915b93841c9390800290620006ce565b509250929050565b600082620007235750600162000542565b81620007325750600062000542565b81600181146200074b5760028114620007565762000776565b600191505062000542565b60ff8411156200076a576200076a62000697565b50506001821b62000542565b5060208310610133831016604e8410600b84101617156200079b575081810a62000542565b620007a78383620006c9565b8060001904821115620007be57620007be62000697565b029392505050565b60006200053f60ff84168362000712565b60805160a05160c0516133b56200084d60003960008181610709015281816129840152612c5401526000818161079001528181610afe01528181610bd70152818161170a01526117420152600081816106a101528181611aa501528181611d1001528181611e5c01526122a701526133b56000f3fe608060405234801561001057600080fd5b50600436106103455760003560e01c80637dbc1df0116101bf578063ca15c873116100fa578063e1a452181161009d578063e1a45218146107e1578063e4107c97146107ea578063e74b981b146107fd578063e7be73fd14610810578063eddd0d9c14610823578063ee75d7d414610836578063eeb3c91014610849578063f80a36d61461085c57600080fd5b8063ca15c87314610740578063cd4d0bcf14610753578063d547741f14610765578063d592d81514610778578063d8dfeb451461078b578063dd45eef6146107b2578063de6afa82146107c5578063e0f486ef146107d857600080fd5b806392bccb801161016257806392bccb801461069457806395e4b2511461069c578063a217fddf146106c3578063a6138ed9146106cb578063aa85c1df146106de578063aab483d6146106f1578063bb13245f14610704578063bcc702831461072b57600080fd5b80637dbc1df0146105fc578063837018fa1461060f57806385c4e79e1461061757806387e2d06e1461062c5780638d044c061461063f5780639010d07c1461064757806391d148541461065a578063926d7d7f1461066d57600080fd5b806336568abe1161028f5780634c99a0af116102325780634c99a0af146105455780634dfe7af21461056c5780634ef1ccd114610574578063510b751b14610587578063525decd6146105905780635d591d68146105a3578063600d2dbc146105dc57806373a95ddd146105ef57600080fd5b806336568abe1461046257806338fed708146104755780633bfa67fe146104d35780634565e9ff146104fb578063458f58151461050e578063469048401461051757806349cbbf2a1461052a5780634b155b971461053257600080fd5b8063244f5acf116102f7578063244f5acf146103c3578063248a9ca3146103d657806324f09e9c146103fa578063258492cd1461040d57806329390370146104205780632b5eceff146104335780632f2ff15d14610446578063354181f31461045957600080fd5b806301ffc9a71461034a578063078a6be81461037257806307bda1bb14610395578063080c279a1461039e57806312589fb5146103a757806313966db5146103b05780632056aa12146103b9575b600080fd5b61035d610358366004612de3565b61086f565b60405190151581526020015b60405180910390f35b61038760008051602061336083398151915281565b604051908152602001610369565b610387600c5481565b61038760085481565b610387600f5481565b610387600a5481565b6103c161089a565b005b6103c16103d1366004612e59565b6108fd565b6103876103e4366004612e9b565b6000908152600160208190526040909120015490565b6103c1610408366004612e9b565b610c10565b6103c161041b366004612ed0565b610c36565b6103c161042e366004612f0b565b610d90565b6103c1610441366004612f26565b610e09565b6103c1610454366004612f6c565b610f18565b610387600d5481565b6103c1610470366004612f6c565b610f44565b6104ae610483366004612e9b565b6007602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610369565b6104ee733d7a5edfcdca0f9fdd066fb94d306f2b4cc7db1781565b6040516103699190612f98565b6103c1610509366004612e59565b610fbe565b610387600b5481565b6005546104ee906001600160a01b031681565b6103c161104c565b6010546104ee906001600160a01b031681565b6103877f6d1bd15a3098a6dad77d962815b9ece90c7c3fedff3027331df16fc4e184940881565b6103c16110a6565b6103c1610582366004612e9b565b6110fb565b61038760115481565b6103c161059e366004612f0b565b611175565b6104ae6105b1366004612e9b565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b6103c16105ea366004612f0b565b6111e1565b600e5461035d9060ff1681565b6103c161060a366004612e9b565b611203565b6103c161127d565b61038760008051602061332083398151915281565b6103c161063a366004612fac565b6112d1565b6103c161138d565b6104ee610655366004613018565b6113e0565b61035d610668366004612f6c565b6113ff565b6103877fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b6103c161142a565b6104ee7f000000000000000000000000000000000000000000000000000000000000000081565b610387600081565b6003546104ee906001600160a01b031681565b6103c16106ec366004612fac565b611480565b6103c16106ff366004612e9b565b611535565b6103877f000000000000000000000000000000000000000000000000000000000000000081565b61038760008051602061334083398151915281565b61038761074e366004612e9b565b6115af565b600e5461035d90610100900460ff1681565b6103c1610773366004612f6c565b6115c6565b6103c1610786366004612e9b565b6115ed565b6104ee7f000000000000000000000000000000000000000000000000000000000000000081565b600e5461035d9062010000900460ff1681565b6103c16107d3366004612ed0565b6117d0565b61038760095481565b61038761271081565b6103c16107f8366004612e9b565b611919565b6103c161080b366004612f0b565b611970565b6103c161081e366004612ed0565b6119db565b6103c1610831366004612e9b565b611baa565b6004546104ee906001600160a01b031681565b6103c1610857366004612e9b565b611c24565b6103c161086a366004613018565b611db8565b60006001600160e01b03198216635a05180f60e01b1480610894575061089482611f8d565b92915050565b6000805160206133208339815191526108b38133611fc2565b600e805461ff0019166101001790556040517fcd71257f2998474633e94cfffa045014068f6218ffdca256b6f4aa9d5f15fb89906108f2903390612f98565b60405180910390a150565b6002600054036109285760405162461bcd60e51b815260040161091f9061303a565b60405180910390fd5b6002600055600e5460ff1680156109525760405163aadfaddd60e01b815260040160405180910390fd5b600082815b81811015610bbc5760006007600088888581811061097757610977613071565b60209081029290920135835250818101929092526040908101600020815160608101835281546001600160a01b03168082526001830154948201949094526002909101549181019190915291506109cd90612026565b80604001516000036109f257604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190613087565b90506000610a7883602001518361204f565b90506000610a8582612080565b90506000610a9382846130b6565b9050610a9f82896130c9565b9750600760008c8c89818110610ab757610ab7613071565b60209081029290920135835250810191909152604001600090812080546001600160a01b031916815560018101829055600201556004548551610b29916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929116908461209d565b8a8a87818110610b3b57610b3b613071565b87516020898101516040808c01518151928352828401899052908201899052606082018b9052608082015292029390930135926001600160a01b031691507f9fcb6040dd03e5eea5db44708f190f5ddebd9ecbbdca948c6abe029f9a2796e49060a00160405180910390a3505050505080610bb5906130dc565b9050610957565b508115610c0457600454600554610c04916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169291811691168561209d565b50506001600055505050565b600080516020613360833981519152610c298133611fc2565b610c32826120fd565b5050565b600080516020613360833981519152610c4f8133611fc2565b83610c5981612026565b6000600760008881526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280876001600160a01b03168152602001868152602001858152506007600089815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050867f5a0c55c421ae3aac2379811eca16aaee32b6e64411322b624118d4219b9350a082600001518884604001518886602001518b604051610d7f969594939291906130f5565b60405180910390a250505050505050565b600080516020613360833981519152610da98133611fc2565b600380546001600160a01b038481166001600160a01b03198316179092556040519116907f801352e72ef9b80b3992ccbedf07ab0e133e7da7aaccf0024abf23f4f32eb99a90610dfc908390869061312b565b60405180910390a1505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610e348133611fc2565b84610e3e81612026565b6000878152600660205260409020546001600160a01b031615610e7457604051631aeecebf60e21b815260040160405180910390fd5b60408051606080820183526001600160a01b0389811680845260208085018b815260008688018181528f82526006845290889020965187546001600160a01b031916951694909417865551600186015591516002909401939093558351898152908101889052928301869052909189917fc985471d1cb1bb75da0d54fa5ab10f7171e952cefcc0bf4fc7c2546c19d1811f910160405180910390a350505050505050565b60008281526001602081905260409091200154610f358133611fc2565b610f3f8383612143565b505050565b6001600160a01b0381163314610fb45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161091f565b610c328282612165565b600260005403610fe05760405162461bcd60e51b815260040161091f9061303a565b6002600055600e54610100900460ff16801561100f5760405163aadfaddd60e01b815260040160405180910390fd5b8160005b81811015610c045761103c85858381811061103057611030613071565b90506020020135612187565b611045816130dc565b9050611013565b6000805160206133208339815191526110658133611fc2565b600e805462ff00001916620100001790556040517fdc41a92196ccc1ab8149c01bc68c2f506b10a7bb5cd2693c9516d176f5381ff4906108f2903390612f98565b6000805160206133608339815191526110bf8133611fc2565b600e805462ff0000191690556040517f53a8c40fc17c78d38e2c06aa8d2c550c1acbf7b30d087dbda289ab3dd41c235c906108f2903390612f98565b6000805160206133608339815191526111148133611fc2565b6127108210156111375760405163617ab12d60e11b815260040160405180910390fd5b600980549083905560408051828152602081018590527ffdaf6ed728cef208e62328a008209556f8281f3062b14dd08aaaa90fa15942119101610dfc565b60008051602061336083398151915261118e8133611fc2565b600480546001600160a01b038481166001600160a01b03198316179092556040519116907fb09f298b2812193d5ada18beaadd6cb8f12b3640926d99de46e2a65394df829d90610dfc908390869061312b565b6000805160206133608339815191526111fa8133611fc2565b610c328261237b565b60008051602061336083398151915261121c8133611fc2565b61271082111561123f57604051637e2df70960e11b815260040160405180910390fd5b600b80549083905560408051828152602081018590527f2956acfe8584fb02384e06c675ee215bf10d55c3de1e6ff9b2f621e8a40c64709101610dfc565b6000805160206133608339815191526112968133611fc2565b600e805461ff00191690556040517f94482ee2b195c365dbbc2d689fd5a088d2b219abe44360ba8895525c9471d66f906108f2903390612f98565b6000805160206133408339815191526112ea8133611fc2565b600354604051637e2b71fb60e01b81526001600160a01b0390911690637e2b71fb9061131c9086908690600401613145565b602060405180830381865afa158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135d919061317e565b61137a576040516373d7250f60e01b815260040160405180910390fd5b611386858585856123f5565b5050505050565b6000805160206133608339815191526113a68133611fc2565b600e805460ff191690556040517fc641b9c4afa539cedcbe2e5f3e47d9f092175b5d0b8ae72dffa634a3eb3e47e4906108f2903390612f98565b60008281526002602052604081206113f890836125a3565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206133208339815191526114438133611fc2565b600e805460ff191660011790556040517f71e0406677c0570b2a66b1a4feeccf5c1cba2d6729435461e27a312b15410d04906108f2903390612f98565b6000805160206133408339815191526114998133611fc2565b600354604051637e2b71fb60e01b81526001600160a01b0390911690637e2b71fb906114cb9086908690600401613145565b602060405180830381865afa1580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c919061317e565b611529576040516373d7250f60e01b815260040160405180910390fd5b611386858585856125af565b60008051602061336083398151915261154e8133611fc2565b6127108210156115715760405163617ab12d60e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527fe6e25add7363f8f8a40cbea9810d3115a33703b10972ef759104219b006574369101610dfc565b6000818152600260205260408120610894906126fb565b600082815260016020819052604090912001546115e38133611fc2565b610f3f8383612165565b60026000540361160f5760405162461bcd60e51b815260040161091f9061303a565b6002600055600e54610100900460ff16801561163e5760405163aadfaddd60e01b815260040160405180910390fd5b3361164881612026565b60085483101561166b57604051636ba4a1c760e01b815260040160405180910390fd5b600061167684612705565b9050600061168482866130b6565b600c80549192506000919082611699836130dc565b909155506040805160608101825233815260208082018681526000838501818152868252600690935293909320915182546001600160a01b0319166001600160a01b039091161782559151600182015590516002909101559050821561173557600554611735906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116913391168661209d565b61177e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633733d7a5edfcdca0f9fdd066fb94d306f2b4cc7db178561209d565b6040805187815260208101849052908101849052819033907f7cbce37c7b11d322316420484f40c29ce672ad3fa16752551a3dbe6ccfa04e149060600160405180910390a35050600160005550505050565b6000805160206133608339815191526117e98133611fc2565b836117f381612026565b6000600660008881526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280876001600160a01b03168152602001868152602001858152506006600089815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050867f7e506b1f11218d4c947d5a59a97fd996c42afc2b024b6aeaec050930eb2b339982600001518884604001518886602001518b604051610d7f969594939291906130f5565b6000805160206133608339815191526119328133611fc2565b600f80549083905560408051828152602081018590527f1071422bad736c3651d3d3b7a4eda70e84e9c85a08f21c955d79ded03bbf06bb9101610dfc565b6000805160206133608339815191526119898133611fc2565b600580546001600160a01b038481166001600160a01b0319831681179093556040519116917f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272191610dfc91849161312b565b7f6d1bd15a3098a6dad77d962815b9ece90c7c3fedff3027331df16fc4e1849408611a068133611fc2565b83611a1081612026565b6000868152600760205260409020546001600160a01b031615611a4657604051636e27aecf60e01b815260040160405180910390fd5b83600003611a675760405163595bd39f60e11b815260040160405180910390fd5b6001600160a01b038516611a8e576040516325cf4ebb60e21b815260040160405180910390fd5b60405163079cc67960e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611adc90339088906004016131a0565b600060405180830381600087803b158015611af657600080fd5b505af1158015611b0a573d6000803e3d6000fd5b5050604080516060810182526001600160a01b0389811680835260208084018b815260008587018181528f82526007845290879020955186546001600160a01b0319169516949094178555516001850155915160029093019290925582518981529081018890529093508992507ffd54f2267d4171d61087dba82ecc7cba341846cdc41eb7c3f6d7c4d822680d89910160405180910390a3505050505050565b600080516020613360833981519152611bc38133611fc2565b612710821115611be657604051637e2df70960e11b815260040160405180910390fd5b600a80549083905560408051828152602081018590527f387269377ae17304805d5f88cea4252e5ca47346783c279aeb9e8627335a49ac9101610dfc565b600260005403611c465760405162461bcd60e51b815260040161091f9061303a565b6002600055600e5460ff168015611c705760405163aadfaddd60e01b815260040160405180910390fd5b600954821015611c935760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611ca4836130dc565b909155506040805160608101825233808252602080830188815260008486018181528782526007909352859020935184546001600160a01b0319166001600160a01b03918216178555905160018501559051600290930192909255915163079cc67960e41b81529293507f000000000000000000000000000000000000000000000000000000000000000016916379cc679091611d459187906004016131a0565b600060405180830381600087803b158015611d5f57600080fd5b505af1158015611d73573d6000803e3d6000fd5b50506040518581528392503391507f80ebb30e7c30052bf403a20da869bdd033841684e93930d97c4af74238529b4f9060200160405180910390a35050600160005550565b600260005403611dda5760405162461bcd60e51b815260040161091f9061303a565b6002600055600e5462010000900460ff168015611e0a5760405163aadfaddd60e01b815260040160405180910390fd5b600f54831015611e2d5760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611e3e836130dc565b9091555060405163079cc67960e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611e9390339088906004016131a0565b600060405180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b505060408051878152602081018790528493503392507fad2102c6abc98f954bd5d61e6c0d19764db331f63019296309309a34f70e66a6910160405180910390a3505060016000555050565b611f1782826113ff565b610c325760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006113f8836001600160a01b038416612718565b60006001600160e01b03198216637965db0b60e01b148061089457506301ffc9a760e01b6001600160e01b0319831614610894565b611fcc82826113ff565b610c3257611fe4816001600160a01b03166014612767565b611fef836020612767565b6040516020016120009291906131dd565b60408051601f198184030181529082905262461bcd60e51b825261091f9160040161324c565b61202f81612903565b61204c57604051634555d55360e11b815260040160405180910390fd5b50565b60008061205c838561327f565b9050612078612073670de0b6b3a76400008361329e565b61297d565b949350505050565b6000612710600b5483612093919061327f565b610894919061329e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526120f79085906129a9565b50505050565b601180549082905560408051828152602081018490527fdaffa4de8807a37aaf10d8a67851ece24bdb59211b326eb514393692ddc9583291015b60405180910390a15050565b61214d8282611f0d565b6000828152600260205260409020610f3f9082611f78565b61216f8282612a7b565b6000828152600260205260409020610f3f9082612ae2565b6000818152600660209081526040808320815160608101835281546001600160a01b03168152600182015493810193909352600201549082018190529091036121e357604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613087565b90506000612269836020015183612af7565b60008581526006602052604080822080546001600160a01b03191681556001810183905560020191909155845190516340c10f1960e01b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916340c10f19916122e49185906004016131a0565b600060405180830381600087803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b50508451602080870151604080890151815188815293840192909252820187905260608201528793506001600160a01b0390911691507fdd602cc9cb236502fb74f091872b4025184011dd96eee41099caa260842f20249060800160405180910390a350505050565b6001600160a01b0381166123a257604051636ca1fdd760e01b815260040160405180910390fd5b601080546001600160a01b038381166001600160a01b03198316179092556040519116907f7d25fe3c08dd306579e1d2a5002c9c44f52c27fc3754b43c75ef1e080d454c8a90612137908390859061312b565b60008051602061334083398151915261240e8133611fc2565b8382811461242f5760405163cc6e40b360e01b815260040160405180910390fd5b60005b8181101561259a57600060068189898581811061245157612451613071565b60209081029290920135835250810191909152604001600020546001600160a01b031603612492576040516305a8a45b60e41b815260040160405180910390fd5b600660008888848181106124a8576124a8613071565b905060200201358152602001908152602001600020600201546000146124e157604051631139f30960e31b815260040160405180910390fd5b8484828181106124f3576124f3613071565b905060200201356006600089898581811061251057612510613071565b9050602002013581526020019081526020016000206002018190555084848281811061253e5761253e613071565b9050602002013587878381811061255757612557613071565b905060200201357fc2055184bbc2d10b90bf7df17a84f8bdda6b52377a976e41e0c1610fffafc0d760405160405180910390a3612593816130dc565b9050612432565b50505050505050565b60006113f88383612b21565b6000805160206133408339815191526125c88133611fc2565b838281146125e95760405163cc6e40b360e01b815260040160405180910390fd5b60005b8181101561259a576007600088888481811061260a5761260a613071565b9050602002013581526020019081526020016000206002015460001461264357604051631139f30960e31b815260040160405180910390fd5b84848281811061265557612655613071565b905060200201356007600089898581811061267257612672613071565b905060200201358152602001908152602001600020600201819055508484828181106126a0576126a0613071565b905060200201358787838181106126b9576126b9613071565b905060200201357e05e86a70f400d1820ab5a0573a2be911d831ab28fe2e9448b34daab223b09c60405160405180910390a36126f4816130dc565b90506125ec565b6000610894825490565b6000612710600a5483612093919061327f565b600081815260018301602052604081205461275f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610894565b506000610894565b6060600061277683600261327f565b6127819060026130c9565b67ffffffffffffffff811115612799576127996132c0565b6040519080825280601f01601f1916602001820160405280156127c3576020820181803683370190505b509050600360fc1b816000815181106127de576127de613071565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061280d5761280d613071565b60200101906001600160f81b031916908160001a905350600061283184600261327f565b61283c9060016130c9565b90505b60018111156128b4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061287057612870613071565b1a60f81b82828151811061288657612886613071565b60200101906001600160f81b031916908160001a90535060049490941c936128ad816132d6565b905061283f565b5083156113f85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161091f565b60105460115460405163609f4d6d60e11b815260048101919091526001600160a01b038381166024830152600092169063c13e9ada90604401602060405180830381865afa158015612959573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061317e565b60006108947f00000000000000000000000000000000000000000000000000000000000000008361329e565b60006129fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b4b9092919063ffffffff16565b805190915015610f3f5780806020019051810190612a1c919061317e565b610f3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161091f565b612a8582826113ff565b15610c325760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006113f8836001600160a01b038416612b5a565b600080612b0384612c4d565b612b1590670de0b6b3a764000061327f565b9050612078838261329e565b6000826000018281548110612b3857612b38613071565b9060005260206000200154905092915050565b60606120788484600085612c79565b60008181526001830160205260408120548015612c43576000612b7e6001836130b6565b8554909150600090612b92906001906130b6565b9050818114612bf7576000866000018281548110612bb257612bb2613071565b9060005260206000200154905080876000018481548110612bd557612bd5613071565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c0857612c086132ed565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610894565b6000915050610894565b60006108947f00000000000000000000000000000000000000000000000000000000000000008361327f565b606082471015612cda5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161091f565b6001600160a01b0385163b612d315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161091f565b600080866001600160a01b03168587604051612d4d9190613303565b60006040518083038185875af1925050503d8060008114612d8a576040519150601f19603f3d011682016040523d82523d6000602084013e612d8f565b606091505b5091509150612d9f828286612daa565b979650505050505050565b60608315612db95750816113f8565b825115612dc95782518084602001fd5b8160405162461bcd60e51b815260040161091f919061324c565b600060208284031215612df557600080fd5b81356001600160e01b0319811681146113f857600080fd5b60008083601f840112612e1f57600080fd5b50813567ffffffffffffffff811115612e3757600080fd5b6020830191508360208260051b8501011115612e5257600080fd5b9250929050565b60008060208385031215612e6c57600080fd5b823567ffffffffffffffff811115612e8357600080fd5b612e8f85828601612e0d565b90969095509350505050565b600060208284031215612ead57600080fd5b5035919050565b80356001600160a01b0381168114612ecb57600080fd5b919050565b60008060008060808587031215612ee657600080fd5b84359350612ef660208601612eb4565b93969395505050506040820135916060013590565b600060208284031215612f1d57600080fd5b6113f882612eb4565b600080600080600060a08688031215612f3e57600080fd5b85359450612f4e60208701612eb4565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215612f7f57600080fd5b82359150612f8f60208401612eb4565b90509250929050565b6001600160a01b0391909116815260200190565b60008060008060408587031215612fc257600080fd5b843567ffffffffffffffff80821115612fda57600080fd5b612fe688838901612e0d565b90965094506020870135915080821115612fff57600080fd5b5061300c87828801612e0d565b95989497509550505050565b6000806040838503121561302b57600080fd5b50508035926020909101359150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561309957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610894576108946130a0565b80820180821115610894576108946130a0565b6000600182016130ee576130ee6130a0565b5060010190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0392831681529116602082015260400190565b6020808252810182905260006001600160fb1b0383111561316557600080fd5b8260051b80856040850137919091016040019392505050565b60006020828403121561319057600080fd5b815180151581146113f857600080fd5b6001600160a01b03929092168252602082015260400190565b60005b838110156131d45781810151838201526020016131bc565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161320f8160178501602088016131b9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132408160288401602088016131b9565b01602801949350505050565b602081526000825180602084015261326b8160408501602087016131b9565b601f01601f19169190910160400192915050565b6000816000190483118215151615613299576132996130a0565b500290565b6000826132bb57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000816132e5576132e56130a0565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516133158184602087016131b9565b919091019291505056fe9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03a2646970667358221220fc6a8bf2c6dbb2613fec6451ff6b4cecdfa415d702a4d36ae18273f9707d86d864736f6c634300081000339ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103455760003560e01c80637dbc1df0116101bf578063ca15c873116100fa578063e1a452181161009d578063e1a45218146107e1578063e4107c97146107ea578063e74b981b146107fd578063e7be73fd14610810578063eddd0d9c14610823578063ee75d7d414610836578063eeb3c91014610849578063f80a36d61461085c57600080fd5b8063ca15c87314610740578063cd4d0bcf14610753578063d547741f14610765578063d592d81514610778578063d8dfeb451461078b578063dd45eef6146107b2578063de6afa82146107c5578063e0f486ef146107d857600080fd5b806392bccb801161016257806392bccb801461069457806395e4b2511461069c578063a217fddf146106c3578063a6138ed9146106cb578063aa85c1df146106de578063aab483d6146106f1578063bb13245f14610704578063bcc702831461072b57600080fd5b80637dbc1df0146105fc578063837018fa1461060f57806385c4e79e1461061757806387e2d06e1461062c5780638d044c061461063f5780639010d07c1461064757806391d148541461065a578063926d7d7f1461066d57600080fd5b806336568abe1161028f5780634c99a0af116102325780634c99a0af146105455780634dfe7af21461056c5780634ef1ccd114610574578063510b751b14610587578063525decd6146105905780635d591d68146105a3578063600d2dbc146105dc57806373a95ddd146105ef57600080fd5b806336568abe1461046257806338fed708146104755780633bfa67fe146104d35780634565e9ff146104fb578063458f58151461050e578063469048401461051757806349cbbf2a1461052a5780634b155b971461053257600080fd5b8063244f5acf116102f7578063244f5acf146103c3578063248a9ca3146103d657806324f09e9c146103fa578063258492cd1461040d57806329390370146104205780632b5eceff146104335780632f2ff15d14610446578063354181f31461045957600080fd5b806301ffc9a71461034a578063078a6be81461037257806307bda1bb14610395578063080c279a1461039e57806312589fb5146103a757806313966db5146103b05780632056aa12146103b9575b600080fd5b61035d610358366004612de3565b61086f565b60405190151581526020015b60405180910390f35b61038760008051602061336083398151915281565b604051908152602001610369565b610387600c5481565b61038760085481565b610387600f5481565b610387600a5481565b6103c161089a565b005b6103c16103d1366004612e59565b6108fd565b6103876103e4366004612e9b565b6000908152600160208190526040909120015490565b6103c1610408366004612e9b565b610c10565b6103c161041b366004612ed0565b610c36565b6103c161042e366004612f0b565b610d90565b6103c1610441366004612f26565b610e09565b6103c1610454366004612f6c565b610f18565b610387600d5481565b6103c1610470366004612f6c565b610f44565b6104ae610483366004612e9b565b6007602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610369565b6104ee733d7a5edfcdca0f9fdd066fb94d306f2b4cc7db1781565b6040516103699190612f98565b6103c1610509366004612e59565b610fbe565b610387600b5481565b6005546104ee906001600160a01b031681565b6103c161104c565b6010546104ee906001600160a01b031681565b6103877f6d1bd15a3098a6dad77d962815b9ece90c7c3fedff3027331df16fc4e184940881565b6103c16110a6565b6103c1610582366004612e9b565b6110fb565b61038760115481565b6103c161059e366004612f0b565b611175565b6104ae6105b1366004612e9b565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b6103c16105ea366004612f0b565b6111e1565b600e5461035d9060ff1681565b6103c161060a366004612e9b565b611203565b6103c161127d565b61038760008051602061332083398151915281565b6103c161063a366004612fac565b6112d1565b6103c161138d565b6104ee610655366004613018565b6113e0565b61035d610668366004612f6c565b6113ff565b6103877fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b6103c161142a565b6104ee7f000000000000000000000000000000000000000000000000000000000000000081565b610387600081565b6003546104ee906001600160a01b031681565b6103c16106ec366004612fac565b611480565b6103c16106ff366004612e9b565b611535565b6103877f000000000000000000000000000000000000000000000000000000000000000081565b61038760008051602061334083398151915281565b61038761074e366004612e9b565b6115af565b600e5461035d90610100900460ff1681565b6103c1610773366004612f6c565b6115c6565b6103c1610786366004612e9b565b6115ed565b6104ee7f000000000000000000000000000000000000000000000000000000000000000081565b600e5461035d9062010000900460ff1681565b6103c16107d3366004612ed0565b6117d0565b61038760095481565b61038761271081565b6103c16107f8366004612e9b565b611919565b6103c161080b366004612f0b565b611970565b6103c161081e366004612ed0565b6119db565b6103c1610831366004612e9b565b611baa565b6004546104ee906001600160a01b031681565b6103c1610857366004612e9b565b611c24565b6103c161086a366004613018565b611db8565b60006001600160e01b03198216635a05180f60e01b1480610894575061089482611f8d565b92915050565b6000805160206133208339815191526108b38133611fc2565b600e805461ff0019166101001790556040517fcd71257f2998474633e94cfffa045014068f6218ffdca256b6f4aa9d5f15fb89906108f2903390612f98565b60405180910390a150565b6002600054036109285760405162461bcd60e51b815260040161091f9061303a565b60405180910390fd5b6002600055600e5460ff1680156109525760405163aadfaddd60e01b815260040160405180910390fd5b600082815b81811015610bbc5760006007600088888581811061097757610977613071565b60209081029290920135835250818101929092526040908101600020815160608101835281546001600160a01b03168082526001830154948201949094526002909101549181019190915291506109cd90612026565b80604001516000036109f257604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190613087565b90506000610a7883602001518361204f565b90506000610a8582612080565b90506000610a9382846130b6565b9050610a9f82896130c9565b9750600760008c8c89818110610ab757610ab7613071565b60209081029290920135835250810191909152604001600090812080546001600160a01b031916815560018101829055600201556004548551610b29916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929116908461209d565b8a8a87818110610b3b57610b3b613071565b87516020898101516040808c01518151928352828401899052908201899052606082018b9052608082015292029390930135926001600160a01b031691507f9fcb6040dd03e5eea5db44708f190f5ddebd9ecbbdca948c6abe029f9a2796e49060a00160405180910390a3505050505080610bb5906130dc565b9050610957565b508115610c0457600454600554610c04916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169291811691168561209d565b50506001600055505050565b600080516020613360833981519152610c298133611fc2565b610c32826120fd565b5050565b600080516020613360833981519152610c4f8133611fc2565b83610c5981612026565b6000600760008881526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280876001600160a01b03168152602001868152602001858152506007600089815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050867f5a0c55c421ae3aac2379811eca16aaee32b6e64411322b624118d4219b9350a082600001518884604001518886602001518b604051610d7f969594939291906130f5565b60405180910390a250505050505050565b600080516020613360833981519152610da98133611fc2565b600380546001600160a01b038481166001600160a01b03198316179092556040519116907f801352e72ef9b80b3992ccbedf07ab0e133e7da7aaccf0024abf23f4f32eb99a90610dfc908390869061312b565b60405180910390a1505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610e348133611fc2565b84610e3e81612026565b6000878152600660205260409020546001600160a01b031615610e7457604051631aeecebf60e21b815260040160405180910390fd5b60408051606080820183526001600160a01b0389811680845260208085018b815260008688018181528f82526006845290889020965187546001600160a01b031916951694909417865551600186015591516002909401939093558351898152908101889052928301869052909189917fc985471d1cb1bb75da0d54fa5ab10f7171e952cefcc0bf4fc7c2546c19d1811f910160405180910390a350505050505050565b60008281526001602081905260409091200154610f358133611fc2565b610f3f8383612143565b505050565b6001600160a01b0381163314610fb45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161091f565b610c328282612165565b600260005403610fe05760405162461bcd60e51b815260040161091f9061303a565b6002600055600e54610100900460ff16801561100f5760405163aadfaddd60e01b815260040160405180910390fd5b8160005b81811015610c045761103c85858381811061103057611030613071565b90506020020135612187565b611045816130dc565b9050611013565b6000805160206133208339815191526110658133611fc2565b600e805462ff00001916620100001790556040517fdc41a92196ccc1ab8149c01bc68c2f506b10a7bb5cd2693c9516d176f5381ff4906108f2903390612f98565b6000805160206133608339815191526110bf8133611fc2565b600e805462ff0000191690556040517f53a8c40fc17c78d38e2c06aa8d2c550c1acbf7b30d087dbda289ab3dd41c235c906108f2903390612f98565b6000805160206133608339815191526111148133611fc2565b6127108210156111375760405163617ab12d60e11b815260040160405180910390fd5b600980549083905560408051828152602081018590527ffdaf6ed728cef208e62328a008209556f8281f3062b14dd08aaaa90fa15942119101610dfc565b60008051602061336083398151915261118e8133611fc2565b600480546001600160a01b038481166001600160a01b03198316179092556040519116907fb09f298b2812193d5ada18beaadd6cb8f12b3640926d99de46e2a65394df829d90610dfc908390869061312b565b6000805160206133608339815191526111fa8133611fc2565b610c328261237b565b60008051602061336083398151915261121c8133611fc2565b61271082111561123f57604051637e2df70960e11b815260040160405180910390fd5b600b80549083905560408051828152602081018590527f2956acfe8584fb02384e06c675ee215bf10d55c3de1e6ff9b2f621e8a40c64709101610dfc565b6000805160206133608339815191526112968133611fc2565b600e805461ff00191690556040517f94482ee2b195c365dbbc2d689fd5a088d2b219abe44360ba8895525c9471d66f906108f2903390612f98565b6000805160206133408339815191526112ea8133611fc2565b600354604051637e2b71fb60e01b81526001600160a01b0390911690637e2b71fb9061131c9086908690600401613145565b602060405180830381865afa158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135d919061317e565b61137a576040516373d7250f60e01b815260040160405180910390fd5b611386858585856123f5565b5050505050565b6000805160206133608339815191526113a68133611fc2565b600e805460ff191690556040517fc641b9c4afa539cedcbe2e5f3e47d9f092175b5d0b8ae72dffa634a3eb3e47e4906108f2903390612f98565b60008281526002602052604081206113f890836125a3565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206133208339815191526114438133611fc2565b600e805460ff191660011790556040517f71e0406677c0570b2a66b1a4feeccf5c1cba2d6729435461e27a312b15410d04906108f2903390612f98565b6000805160206133408339815191526114998133611fc2565b600354604051637e2b71fb60e01b81526001600160a01b0390911690637e2b71fb906114cb9086908690600401613145565b602060405180830381865afa1580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c919061317e565b611529576040516373d7250f60e01b815260040160405180910390fd5b611386858585856125af565b60008051602061336083398151915261154e8133611fc2565b6127108210156115715760405163617ab12d60e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527fe6e25add7363f8f8a40cbea9810d3115a33703b10972ef759104219b006574369101610dfc565b6000818152600260205260408120610894906126fb565b600082815260016020819052604090912001546115e38133611fc2565b610f3f8383612165565b60026000540361160f5760405162461bcd60e51b815260040161091f9061303a565b6002600055600e54610100900460ff16801561163e5760405163aadfaddd60e01b815260040160405180910390fd5b3361164881612026565b60085483101561166b57604051636ba4a1c760e01b815260040160405180910390fd5b600061167684612705565b9050600061168482866130b6565b600c80549192506000919082611699836130dc565b909155506040805160608101825233815260208082018681526000838501818152868252600690935293909320915182546001600160a01b0319166001600160a01b039091161782559151600182015590516002909101559050821561173557600554611735906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116913391168661209d565b61177e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633733d7a5edfcdca0f9fdd066fb94d306f2b4cc7db178561209d565b6040805187815260208101849052908101849052819033907f7cbce37c7b11d322316420484f40c29ce672ad3fa16752551a3dbe6ccfa04e149060600160405180910390a35050600160005550505050565b6000805160206133608339815191526117e98133611fc2565b836117f381612026565b6000600660008881526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280876001600160a01b03168152602001868152602001858152506006600089815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050867f7e506b1f11218d4c947d5a59a97fd996c42afc2b024b6aeaec050930eb2b339982600001518884604001518886602001518b604051610d7f969594939291906130f5565b6000805160206133608339815191526119328133611fc2565b600f80549083905560408051828152602081018590527f1071422bad736c3651d3d3b7a4eda70e84e9c85a08f21c955d79ded03bbf06bb9101610dfc565b6000805160206133608339815191526119898133611fc2565b600580546001600160a01b038481166001600160a01b0319831681179093556040519116917f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272191610dfc91849161312b565b7f6d1bd15a3098a6dad77d962815b9ece90c7c3fedff3027331df16fc4e1849408611a068133611fc2565b83611a1081612026565b6000868152600760205260409020546001600160a01b031615611a4657604051636e27aecf60e01b815260040160405180910390fd5b83600003611a675760405163595bd39f60e11b815260040160405180910390fd5b6001600160a01b038516611a8e576040516325cf4ebb60e21b815260040160405180910390fd5b60405163079cc67960e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611adc90339088906004016131a0565b600060405180830381600087803b158015611af657600080fd5b505af1158015611b0a573d6000803e3d6000fd5b5050604080516060810182526001600160a01b0389811680835260208084018b815260008587018181528f82526007845290879020955186546001600160a01b0319169516949094178555516001850155915160029093019290925582518981529081018890529093508992507ffd54f2267d4171d61087dba82ecc7cba341846cdc41eb7c3f6d7c4d822680d89910160405180910390a3505050505050565b600080516020613360833981519152611bc38133611fc2565b612710821115611be657604051637e2df70960e11b815260040160405180910390fd5b600a80549083905560408051828152602081018590527f387269377ae17304805d5f88cea4252e5ca47346783c279aeb9e8627335a49ac9101610dfc565b600260005403611c465760405162461bcd60e51b815260040161091f9061303a565b6002600055600e5460ff168015611c705760405163aadfaddd60e01b815260040160405180910390fd5b600954821015611c935760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611ca4836130dc565b909155506040805160608101825233808252602080830188815260008486018181528782526007909352859020935184546001600160a01b0319166001600160a01b03918216178555905160018501559051600290930192909255915163079cc67960e41b81529293507f000000000000000000000000000000000000000000000000000000000000000016916379cc679091611d459187906004016131a0565b600060405180830381600087803b158015611d5f57600080fd5b505af1158015611d73573d6000803e3d6000fd5b50506040518581528392503391507f80ebb30e7c30052bf403a20da869bdd033841684e93930d97c4af74238529b4f9060200160405180910390a35050600160005550565b600260005403611dda5760405162461bcd60e51b815260040161091f9061303a565b6002600055600e5462010000900460ff168015611e0a5760405163aadfaddd60e01b815260040160405180910390fd5b600f54831015611e2d5760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611e3e836130dc565b9091555060405163079cc67960e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611e9390339088906004016131a0565b600060405180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b505060408051878152602081018790528493503392507fad2102c6abc98f954bd5d61e6c0d19764db331f63019296309309a34f70e66a6910160405180910390a3505060016000555050565b611f1782826113ff565b610c325760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006113f8836001600160a01b038416612718565b60006001600160e01b03198216637965db0b60e01b148061089457506301ffc9a760e01b6001600160e01b0319831614610894565b611fcc82826113ff565b610c3257611fe4816001600160a01b03166014612767565b611fef836020612767565b6040516020016120009291906131dd565b60408051601f198184030181529082905262461bcd60e51b825261091f9160040161324c565b61202f81612903565b61204c57604051634555d55360e11b815260040160405180910390fd5b50565b60008061205c838561327f565b9050612078612073670de0b6b3a76400008361329e565b61297d565b949350505050565b6000612710600b5483612093919061327f565b610894919061329e565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526120f79085906129a9565b50505050565b601180549082905560408051828152602081018490527fdaffa4de8807a37aaf10d8a67851ece24bdb59211b326eb514393692ddc9583291015b60405180910390a15050565b61214d8282611f0d565b6000828152600260205260409020610f3f9082611f78565b61216f8282612a7b565b6000828152600260205260409020610f3f9082612ae2565b6000818152600660209081526040808320815160608101835281546001600160a01b03168152600182015493810193909352600201549082018190529091036121e357604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613087565b90506000612269836020015183612af7565b60008581526006602052604080822080546001600160a01b03191681556001810183905560020191909155845190516340c10f1960e01b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916340c10f19916122e49185906004016131a0565b600060405180830381600087803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b50508451602080870151604080890151815188815293840192909252820187905260608201528793506001600160a01b0390911691507fdd602cc9cb236502fb74f091872b4025184011dd96eee41099caa260842f20249060800160405180910390a350505050565b6001600160a01b0381166123a257604051636ca1fdd760e01b815260040160405180910390fd5b601080546001600160a01b038381166001600160a01b03198316179092556040519116907f7d25fe3c08dd306579e1d2a5002c9c44f52c27fc3754b43c75ef1e080d454c8a90612137908390859061312b565b60008051602061334083398151915261240e8133611fc2565b8382811461242f5760405163cc6e40b360e01b815260040160405180910390fd5b60005b8181101561259a57600060068189898581811061245157612451613071565b60209081029290920135835250810191909152604001600020546001600160a01b031603612492576040516305a8a45b60e41b815260040160405180910390fd5b600660008888848181106124a8576124a8613071565b905060200201358152602001908152602001600020600201546000146124e157604051631139f30960e31b815260040160405180910390fd5b8484828181106124f3576124f3613071565b905060200201356006600089898581811061251057612510613071565b9050602002013581526020019081526020016000206002018190555084848281811061253e5761253e613071565b9050602002013587878381811061255757612557613071565b905060200201357fc2055184bbc2d10b90bf7df17a84f8bdda6b52377a976e41e0c1610fffafc0d760405160405180910390a3612593816130dc565b9050612432565b50505050505050565b60006113f88383612b21565b6000805160206133408339815191526125c88133611fc2565b838281146125e95760405163cc6e40b360e01b815260040160405180910390fd5b60005b8181101561259a576007600088888481811061260a5761260a613071565b9050602002013581526020019081526020016000206002015460001461264357604051631139f30960e31b815260040160405180910390fd5b84848281811061265557612655613071565b905060200201356007600089898581811061267257612672613071565b905060200201358152602001908152602001600020600201819055508484828181106126a0576126a0613071565b905060200201358787838181106126b9576126b9613071565b905060200201357e05e86a70f400d1820ab5a0573a2be911d831ab28fe2e9448b34daab223b09c60405160405180910390a36126f4816130dc565b90506125ec565b6000610894825490565b6000612710600a5483612093919061327f565b600081815260018301602052604081205461275f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610894565b506000610894565b6060600061277683600261327f565b6127819060026130c9565b67ffffffffffffffff811115612799576127996132c0565b6040519080825280601f01601f1916602001820160405280156127c3576020820181803683370190505b509050600360fc1b816000815181106127de576127de613071565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061280d5761280d613071565b60200101906001600160f81b031916908160001a905350600061283184600261327f565b61283c9060016130c9565b90505b60018111156128b4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061287057612870613071565b1a60f81b82828151811061288657612886613071565b60200101906001600160f81b031916908160001a90535060049490941c936128ad816132d6565b905061283f565b5083156113f85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161091f565b60105460115460405163609f4d6d60e11b815260048101919091526001600160a01b038381166024830152600092169063c13e9ada90604401602060405180830381865afa158015612959573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061317e565b60006108947f00000000000000000000000000000000000000000000000000000000000000008361329e565b60006129fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b4b9092919063ffffffff16565b805190915015610f3f5780806020019051810190612a1c919061317e565b610f3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161091f565b612a8582826113ff565b15610c325760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006113f8836001600160a01b038416612b5a565b600080612b0384612c4d565b612b1590670de0b6b3a764000061327f565b9050612078838261329e565b6000826000018281548110612b3857612b38613071565b9060005260206000200154905092915050565b60606120788484600085612c79565b60008181526001830160205260408120548015612c43576000612b7e6001836130b6565b8554909150600090612b92906001906130b6565b9050818114612bf7576000866000018281548110612bb257612bb2613071565b9060005260206000200154905080876000018481548110612bd557612bd5613071565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c0857612c086132ed565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610894565b6000915050610894565b60006108947f00000000000000000000000000000000000000000000000000000000000000008361327f565b606082471015612cda5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161091f565b6001600160a01b0385163b612d315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161091f565b600080866001600160a01b03168587604051612d4d9190613303565b60006040518083038185875af1925050503d8060008114612d8a576040519150601f19603f3d011682016040523d82523d6000602084013e612d8f565b606091505b5091509150612d9f828286612daa565b979650505050505050565b60608315612db95750816113f8565b825115612dc95782518084602001fd5b8160405162461bcd60e51b815260040161091f919061324c565b600060208284031215612df557600080fd5b81356001600160e01b0319811681146113f857600080fd5b60008083601f840112612e1f57600080fd5b50813567ffffffffffffffff811115612e3757600080fd5b6020830191508360208260051b8501011115612e5257600080fd5b9250929050565b60008060208385031215612e6c57600080fd5b823567ffffffffffffffff811115612e8357600080fd5b612e8f85828601612e0d565b90969095509350505050565b600060208284031215612ead57600080fd5b5035919050565b80356001600160a01b0381168114612ecb57600080fd5b919050565b60008060008060808587031215612ee657600080fd5b84359350612ef660208601612eb4565b93969395505050506040820135916060013590565b600060208284031215612f1d57600080fd5b6113f882612eb4565b600080600080600060a08688031215612f3e57600080fd5b85359450612f4e60208701612eb4565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215612f7f57600080fd5b82359150612f8f60208401612eb4565b90509250929050565b6001600160a01b0391909116815260200190565b60008060008060408587031215612fc257600080fd5b843567ffffffffffffffff80821115612fda57600080fd5b612fe688838901612e0d565b90965094506020870135915080821115612fff57600080fd5b5061300c87828801612e0d565b95989497509550505050565b6000806040838503121561302b57600080fd5b50508035926020909101359150565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561309957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610894576108946130a0565b80820180821115610894576108946130a0565b6000600182016130ee576130ee6130a0565b5060010190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0392831681529116602082015260400190565b6020808252810182905260006001600160fb1b0383111561316557600080fd5b8260051b80856040850137919091016040019392505050565b60006020828403121561319057600080fd5b815180151581146113f857600080fd5b6001600160a01b03929092168252602082015260400190565b60005b838110156131d45781810151838201526020016131bc565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161320f8160178501602088016131b9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516132408160288401602088016131b9565b01602801949350505050565b602081526000825180602084015261326b8160408501602087016131b9565b601f01601f19169190910160400192915050565b6000816000190483118215151615613299576132996130a0565b500290565b6000826132bb57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000816132e5576132e56130a0565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600082516133158184602087016131b9565b919091019291505056fe9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03a2646970667358221220fc6a8bf2c6dbb2613fec6451ff6b4cecdfa415d702a4d36ae18273f9707d86d864736f6c63430008100033",
  "devdoc": {
    "events": {
      "RedemptionProofAdded(bytes32,address,uint256,uint256)": {
        "params": {
          "rwaAmountBurned": "Amount of OMMF burned",
          "timestamp": "Timestamp of the redemption",
          "txHash": "Tx hash (redemption id) of the redemption transfer",
          "user": "Address of the user who made the redemption"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addProof(bytes32,address,uint256,uint256,uint256)": {
        "details": "txHash is used as the depositId in storageAll amounts are in decimals of `collateral`",
        "params": {
          "depositAmountAfterFee": "The amount of the deposit after fees",
          "feeAmount": "The amount of the fees taken",
          "timestamp": "The timestamp of the deposit",
          "txHash": "The transaction hash of the deposit",
          "user": "The address of the user who made the deposit"
        }
      },
      "addRedemptionProof(bytes32,address,uint256,uint256)": {
        "params": {
          "rwaAmountToBurn": "The amount of OMMF burned",
          "timestamp": "The timestamp of the redemption request",
          "txHash": "The tx hash (redemption Id) of the redemption",
          "user": "The address of the user who made the redemption"
        }
      },
      "claimMint(bytes32[])": {
        "details": "Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint",
        "params": {
          "depositIds": "An array containing the deposit Ids one wishes to claim"
        }
      },
      "claimRedemption(bytes32[])": {
        "details": "Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption",
        "params": {
          "redemptionIds": "an Array of redemption Id's which ought to fulfilled"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "overwriteDepositor(bytes32,address,uint256,uint256)": {
        "params": {
          "depositAmountAfterFee": "The deposit value for the new entry",
          "depositIdToOverwrite": "The depositId of the entry we wish to                              overwrite",
          "priceId": "The priceId to be associated with the new                              entry",
          "user": "The user for the new entry"
        }
      },
      "overwriteRedeemer(bytes32,address,uint256,uint256)": {
        "params": {
          "priceId": "The priceID to be associated with the new                                entry",
          "redemptionIdToOverwrite": "The redemptionId of the entry we wish to                                overwrite",
          "rwaTokenAmountBurned": "The burn amount for the new entry",
          "user": "The user for the new entry"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "requestRedemption(uint256)": {
        "params": {
          "amount": "The amount (in units of `rwa`) that a user wishes to redeem               from the fund"
        }
      },
      "requestRedemptionServicedOffchain(uint256,bytes32)": {
        "params": {
          "amountRWATokenToRedeem": "The requested redemption amount",
          "offChainDestination": "A hash of the destination to which                               the request should be serviced to."
        }
      },
      "requestSubscription(uint256)": {
        "params": {
          "amount": "The amount of collateral one wished to deposit"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAssetSender(address)": {
        "params": {
          "newAssetSender": "The address of the new `assetSender`"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "The address of the new `feeRecipient`"
        }
      },
      "setKYCRegistry(address)": {
        "params": {
          "_kycRegistry": "The new KYC registry address"
        }
      },
      "setKYCRequirementGroup(uint256)": {
        "params": {
          "_kycRequirementGroup": "The new KYC requirement group"
        }
      },
      "setMinimumDepositAmount(uint256)": {
        "params": {
          "minDepositAmount": "The minimum amount required to submit a deposit                         request"
        }
      },
      "setMinimumRedemptionAmount(uint256)": {
        "params": {
          "_minimumRedemptionAmount": "The minimum amount required to submit a                                 redemption request"
        }
      },
      "setMintFee(uint256)": {
        "details": "The maximum fee that can be set is 10_000 bps, or 100%",
        "params": {
          "_mintFee": "The new mint fee specified in basis points"
        }
      },
      "setOffChainRedemptionMinimum(uint256)": {
        "params": {
          "_minimumOffChainRedemptionAmount": "The new minimum off chain                                         redemption amount"
        }
      },
      "setPriceIdForDeposits(bytes32[],uint256[])": {
        "details": "Array size must match",
        "params": {
          "depositIds": "an Array of deposit Ids to be associated",
          "priceIds": "an Array of price Ids to be associated"
        }
      },
      "setPriceIdForRedemptions(bytes32[],uint256[])": {
        "params": {
          "priceIds": "an Array of priceIds to associate",
          "redemptionIds": "an Array of redemptionIds to associate"
        }
      },
      "setPricer(address)": {
        "params": {
          "newPricer": "The address of the new pricer contract"
        }
      },
      "setRedemptionFee(uint256)": {
        "details": "The maximum fee that can be set is 10_000 bps, or 100%",
        "params": {
          "_redemptionFee": "The new redeem fee specified in basis points"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PriceIdNotSet()": [
        {
          "notice": "ERRORS ///"
        }
      ],
      "RegistryZeroAddress()": [
        {
          "notice": "Error for when caller attempts to set the KYC registry refernce         to the zero address."
        }
      ]
    },
    "events": {
      "AssetSenderSet(address,address)": {
        "notice": "Event emitted when the assetSender is changed"
      },
      "DepositProofAdded(bytes32,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when deposit proof has been added"
      },
      "FeeRecipientSet(address,address)": {
        "notice": "Event emitted when fee recipient is set"
      },
      "MinimumDepositAmountSet(uint256,uint256)": {
        "notice": "Event emitted when minimum deposit amount is set"
      },
      "MinimumRedemptionAmountSet(uint256,uint256)": {
        "notice": "Event emitted when a new redeem minimum is set.         All units are in 1e18"
      },
      "MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a Mint request is completed"
      },
      "MintFeeSet(uint256,uint256)": {
        "notice": "Event emitted when mint fee is set"
      },
      "MintRequested(address,bytes32,uint256,uint256,uint256)": {
        "notice": "Event emitted when a mint request is submitted"
      },
      "NewPricerSet(address,address)": {
        "notice": "Event emitted when a new Pricer contract is set"
      },
      "OffChainRedemptionMinimumSet(uint256,uint256)": {
        "notice": "Event emitted when the off chain redemption minimum is         updated"
      },
      "OffChainRedemptionPaused(address)": {
        "notice": "Event emitted when the off chain redemption feature is         paused"
      },
      "OffChainRedemptionUnpaused(address)": {
        "notice": "Event emitted when the off chain redemption feature is         unpaused"
      },
      "PriceIdSetForDeposit(bytes32,uint256)": {
        "notice": "Event emitted when a deposit has its corresponding priceId set"
      },
      "PriceIdSetForRedemption(bytes32,uint256)": {
        "notice": "Event Emitted when a redemption has its corresponding priceId set"
      },
      "RedemptionCompleted(address,bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a redemption request is completed"
      },
      "RedemptionFeeSet(uint256,uint256)": {
        "notice": "Event emitted when redeem fee is set"
      },
      "RedemptionPaused(address)": {
        "notice": "Event emitted when redemptions are paused"
      },
      "RedemptionProofAdded(bytes32,address,uint256,uint256)": {
        "notice": "Event emitted when redemption proof has been added"
      },
      "RedemptionRequested(address,bytes32,uint256)": {
        "notice": "Event emitted when redemption request is submitted"
      },
      "RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)": {
        "notice": "Event emitted when redemption request is submitted"
      },
      "RedemptionUnpaused(address)": {
        "notice": "Event emitted when redemptions are unpaused"
      },
      "SubscriptionPaused(address)": {
        "notice": "Event emitted when subscriptions are paused"
      },
      "SubscriptionUnpaused(address)": {
        "notice": "Event emitted when subscriptions are unpaused"
      }
    },
    "kind": "user",
    "methods": {
      "addProof(bytes32,address,uint256,uint256,uint256)": {
        "notice": "Adds a deposit proof to the contract"
      },
      "addRedemptionProof(bytes32,address,uint256,uint256)": {
        "notice": "Function to add a redemption proof to the contract"
      },
      "claimMint(bytes32[])": {
        "notice": "Function used to claim tokens corresponding to a deposit request"
      },
      "claimRedemption(bytes32[])": {
        "notice": "Function to claim collateral corresponding to a redemption request"
      },
      "kycRegistry()": {
        "notice": "Returns reference to the KYC registry that this client queries"
      },
      "kycRequirementGroup()": {
        "notice": "Returns what KYC group this client checks accounts for"
      },
      "overwriteDepositor(bytes32,address,uint256,uint256)": {
        "notice": "Admin function to overwrite entries in the depoitIdToDepositor         mapping"
      },
      "overwriteRedeemer(bytes32,address,uint256,uint256)": {
        "notice": "Admin function to overwrite entries in the redemptionIdToRedeemer         mapping"
      },
      "pauseOffChainRedemption()": {
        "notice": "Function to pause off chain redemptoins"
      },
      "pauseRedemption()": {
        "notice": "Function to pause redemptions to RWAHub"
      },
      "pauseSubscription()": {
        "notice": "Function to pause subscription to RWAHub"
      },
      "requestRedemption(uint256)": {
        "notice": "Function used by users to request a redemption from the fund"
      },
      "requestRedemptionServicedOffchain(uint256,bytes32)": {
        "notice": "Request a redemption to be serviced off chain."
      },
      "requestSubscription(uint256)": {
        "notice": "Function used by users to request subscription to the fund"
      },
      "setAssetSender(address)": {
        "notice": "Admin function to set the address of `assetSender`"
      },
      "setFeeRecipient(address)": {
        "notice": "Admin function to set the address of `feeRecipient`"
      },
      "setKYCRegistry(address)": {
        "notice": "Update KYC registry address"
      },
      "setKYCRequirementGroup(uint256)": {
        "notice": "Update KYC group of the contract for which         accounts are checked against"
      },
      "setMinimumDepositAmount(uint256)": {
        "notice": "Admin function to set the minimum amount required for a deposit"
      },
      "setMinimumRedemptionAmount(uint256)": {
        "notice": "Admin function to set the minimum amount to redeem"
      },
      "setMintFee(uint256)": {
        "notice": "Admin function to set the mint fee"
      },
      "setOffChainRedemptionMinimum(uint256)": {
        "notice": "Admin Function to set the minimum off chain redemption amount"
      },
      "setPriceIdForDeposits(bytes32[],uint256[])": {
        "notice": "Admin function to associate a depositId with a given Price Id"
      },
      "setPriceIdForRedemptions(bytes32[],uint256[])": {
        "notice": "Admin function to associate redemptionId with a given priceId"
      },
      "setPricer(address)": {
        "notice": "Admin function to set the address of the Pricer contract"
      },
      "setRedemptionFee(uint256)": {
        "notice": "Admin function to set the redeem fee"
      },
      "unpauseOffChainRedemption()": {
        "notice": "Function to unpause off chain redemptoins"
      },
      "unpauseRedemption()": {
        "notice": "Function to unpause redemptions to RWAHub"
      },
      "unpauseSubscription()": {
        "notice": "Function to unpause subscriptions to RWAHub"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3395,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2877,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2872_storage)"
      },
      {
        "astId": 3180,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4404_storage)"
      },
      {
        "astId": 252,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "pricer",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPricerReader)5021"
      },
      {
        "astId": 257,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "assetSender",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 259,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 264,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "depositIdToDepositor",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Depositor)5059_storage)"
      },
      {
        "astId": 269,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "redemptionIdToRedeemer",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Redeemer)5066_storage)"
      },
      {
        "astId": 272,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "minimumDepositAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 274,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "minimumRedemptionAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 277,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "mintFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 280,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "redemptionFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 288,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "subscriptionRequestCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 291,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "redemptionRequestCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 296,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "redemptionPaused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 298,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "subscriptionPaused",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2702,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "offChainRedemptionPaused",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2704,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "minimumOffChainRedemptionAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5811,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "kycRegistry",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IKYCRegistry)5753"
      },
      {
        "astId": 5814,
        "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
        "label": "kycRequirementGroup",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IKYCRegistry)5753": {
        "encoding": "inplace",
        "label": "contract IKYCRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IPricerReader)5021": {
        "encoding": "inplace",
        "label": "contract IPricerReader",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4404_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4404_storage"
      },
      "t_mapping(t_bytes32,t_struct(Depositor)5059_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IRWAHub.Depositor)",
        "numberOfBytes": "32",
        "value": "t_struct(Depositor)5059_storage"
      },
      "t_mapping(t_bytes32,t_struct(Redeemer)5066_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IRWAHub.Redeemer)",
        "numberOfBytes": "32",
        "value": "t_struct(Redeemer)5066_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2872_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2872_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4404_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4403,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4103_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Depositor)5059_storage": {
        "encoding": "inplace",
        "label": "struct IRWAHub.Depositor",
        "members": [
          {
            "astId": 5054,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5056,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "amountDepositedMinusFees",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5058,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "priceId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Redeemer)5066_storage": {
        "encoding": "inplace",
        "label": "struct IRWAHub.Redeemer",
        "members": [
          {
            "astId": 5061,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5063,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "amountRwaTokenBurned",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5065,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "priceId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)2872_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2869,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2871,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4103_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4098,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4102,
            "contract": "contracts/ousg/ousgManager.sol:OUSGManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}