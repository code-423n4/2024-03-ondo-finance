{
  "address": "0x8Cbb8dB5CE28CF072776866F701368BBcf81F087",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_axelarGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasService",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotBridgeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DestinationNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GasFeeTooLow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "version",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        }
      ],
      "name": "ChainSupportRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "DestinationChainContractAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AXELAR_GATEWAY",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAS_RECEIVER",
      "outputs": [
        {
          "internalType": "contract IAxelarGasService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IRWALike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        }
      ],
      "name": "burnAndCallAxelar",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "destChainToContractAddr",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMulticall.ExCallData[]",
          "name": "exCallData",
          "type": "tuple[]"
        }
      ],
      "name": "multiexcall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        }
      ],
      "name": "removeDestinationChainContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setDestinationChainContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfff2a24836c9e5fa3cf253885c4c59610262b3de23a6b0cc74dde8a40c63a984",
  "receipt": {
    "to": null,
    "from": "0xfE0c4DCF0f7d5334a251BC02482ab88bD45FD5D4",
    "contractAddress": "0x8Cbb8dB5CE28CF072776866F701368BBcf81F087",
    "transactionIndex": 0,
    "gasUsed": "1376470",
    "logsBloom": "0x
    "blockHash": "0xc00a0c409c89ab860c83dbbe39613d2535c7b62c54aa2949a9bd5dca2f2248cb",
    "transactionHash": "0xfff2a24836c9e5fa3cf253885c4c59610262b3de23a6b0cc74dde8a40c63a984",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17497924,
        "transactionHash": "0xfff2a24836c9e5fa3cf253885c4c59610262b3de23a6b0cc74dde8a40c63a984",
        "address": "0x8Cbb8dB5CE28CF072776866F701368BBcf81F087",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fe0c4dcf0f7d5334a251bc02482ab88bd45fd5d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc00a0c409c89ab860c83dbbe39613d2535c7b62c54aa2949a9bd5dca2f2248cb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17497924,
        "transactionHash": "0xfff2a24836c9e5fa3cf253885c4c59610262b3de23a6b0cc74dde8a40c63a984",
        "address": "0x8Cbb8dB5CE28CF072776866F701368BBcf81F087",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000fe0c4dcf0f7d5334a251bc02482ab88bd45fd5d4",
          "0x000000000000000000000000c8a7870ffe41054612f7f3433e173d8b5bfca8e3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc00a0c409c89ab860c83dbbe39613d2535c7b62c54aa2949a9bd5dca2f2248cb"
      }
    ],
    "blockNumber": 17497924,
    "cumulativeGasUsed": "1376470",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5bE26527e817998A7206475496fDE1E68957c5A6",
    "0xe432150cce91c13a887f7D836923d5597adD8E31",
    "0x2d5d7d31F671F86C782533cc367F14109a082712",
    "0xC8A7870fFe41054612F7f3433E173D8b5bFcA8E3"
  ],
  "solcInputHash": "c2a9bb114eddca6fc8f86159b613e916",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_axelarGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotBridgeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasFeeTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"}],\"name\":\"ChainSupportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"DestinationChainContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AXELAR_GATEWAY\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_RECEIVER\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IRWALike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"}],\"name\":\"burnAndCallAxelar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"destChainToContractAddr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct IMulticall.ExCallData[]\",\"name\":\"exCallData\",\"type\":\"tuple[]\"}],\"name\":\"multiexcall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"}],\"name\":\"removeDestinationChainContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setDestinationChainContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BridgeInitiated(address,uint256,uint256,bytes32,uint256)\":{\"params\":{\"amount\":\"The amount field in the msg being passed\",\"chainId\":\"The chainId of the chain which the src bridge is deployed to\",\"nonce\":\"The nonce of the src bridge for this msg pass\",\"user\":\"The account initiating the msg pass\",\"version\":\"The payload version\"}},\"ChainSupportRemoved(string)\":{\"params\":{\"destinationChain\":\"The destination chain to be removed;\"}},\"DestinationChainContractAddressSet(string,address)\":{\"params\":{\"contractAddress\":\"The contract address on the destination chain\",\"destinationChain\":\"The destination chain\"}}},\"kind\":\"dev\",\"methods\":{\"burnAndCallAxelar(uint256,string)\":{\"details\":\"The amount of tokens to mint is the same as the amount burnedUser must approve `amount` tokens to this contract before bridging\",\"params\":{\"amount\":\"The amount of tokens to burn\",\"destinationChain\":\"The destination chain to mint tokens on\"}},\"constructor\":{\"params\":{\"_axelarGateway\":\"The address of the AxelarGateway contract\",\"_gasService\":\"The address of the AxelarGasService contract\",\"_token\":\"The address of the token bridged\",\"owner\":\"The owner of the contract\"}},\"multiexcall((address,bytes,uint256)[])\":{\"details\":\"All external calls made through this function will      msg.sender == contract address\",\"params\":{\"exCallData\":\"Struct consisting of       1) target - contract to call       2) data - data to call target with       3) value - eth value to call target with\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only used for bridge functions\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeDestinationChainContractAddress(string)\":{\"params\":{\"destinationChain\":\"The destination chain to disallow\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDestinationChainContractAddress(string,address)\":{\"details\":\"Chain name must come from list of supported chains      at https://docs.axelar.dev/dev/reference/mainnet-chain-names\",\"params\":{\"contractAddress\":\"The contract address on the destination chain\",\"destinationChain\":\"The destination chain\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only used for bridge functions\"}},\"stateVariables\":{\"destChainToContractAddr\":{\"details\":\"Axelar uses the string representation of addresses, hence we store      the address as a string\"}},\"version\":1},\"userdoc\":{\"events\":{\"BridgeInitiated(address,uint256,uint256,bytes32,uint256)\":{\"notice\":\"Event emitted when a message is passed to an Axelar gateway\"},\"ChainSupportRemoved(string)\":{\"notice\":\"Event emitted when the destination chain to contract address mapping is         deleted\"},\"DestinationChainContractAddressSet(string,address)\":{\"notice\":\"Event emitted when the destination chain to contract address mapping is set\"}},\"kind\":\"user\",\"methods\":{\"AXELAR_GATEWAY()\":{\"notice\":\"Pointer  to AxelarGateway contract\"},\"CHAIN_ID()\":{\"notice\":\"src Chain Id, used to salt txnHash on dst Chain\"},\"GAS_RECEIVER()\":{\"notice\":\"Pointer to AxelarGasService contract\"},\"TOKEN()\":{\"notice\":\"Token contract bridged by this contract\"},\"VERSION()\":{\"notice\":\"Versioning for payload\"},\"burnAndCallAxelar(uint256,string)\":{\"notice\":\"Burns tokens on the source Chain and calls AxelarGateway contract         to mint tokens on the destination chain\"},\"constructor\":{\"notice\":\"Constructor\"},\"destChainToContractAddr(string)\":{\"notice\":\"Mapping from destination chain to bridge address on that chain\"},\"multiexcall((address,bytes,uint256)[])\":{\"notice\":\"Allows for arbitrary batched calls\"},\"nonce()\":{\"notice\":\"Monotonically increasing nonce for each transaction\"},\"pause()\":{\"notice\":\"Admin function to pause the contract\"},\"removeDestinationChainContractAddress(string)\":{\"notice\":\"Deletes an entry w/n the destination chain to contract address         mapping\"},\"setDestinationChainContractAddress(string,address)\":{\"notice\":\"Sets the destination chain to contract address mapping\"},\"unpause()\":{\"notice\":\"Admin function to unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/SourceBridge.sol\":\"SourceBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/bridge/SourceBridge.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IAxelarGateway.sol\\\";\\nimport \\\"contracts/interfaces/IAxelarGasService.sol\\\";\\nimport \\\"contracts/interfaces/IMulticall.sol\\\";\\nimport \\\"contracts/interfaces/IRWALike.sol\\\";\\nimport {AddressToString} from \\\"contracts/external/axelar/StringAddressUtils.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract SourceBridge is Ownable, Pausable, IMulticall {\\n  /// @notice Mapping from destination chain to bridge address on that chain\\n  /// @dev Axelar uses the string representation of addresses, hence we store\\n  ///      the address as a string\\n  mapping(string => string) public destChainToContractAddr;\\n\\n  /// @notice Token contract bridged by this contract\\n  IRWALike public immutable TOKEN;\\n\\n  /// @notice Pointer  to AxelarGateway contract\\n  IAxelarGateway public immutable AXELAR_GATEWAY;\\n\\n  /// @notice Pointer to AxelarGasService contract\\n  IAxelarGasService public immutable GAS_RECEIVER;\\n\\n  /// @notice Versioning for payload\\n  bytes32 public constant VERSION = \\\"1.0\\\";\\n\\n  /// @notice Monotonically increasing nonce for each transaction\\n  uint256 public nonce;\\n\\n  /// @notice src Chain Id, used to salt txnHash on dst Chain\\n  uint256 public immutable CHAIN_ID;\\n\\n  /**\\n   * @notice Constructor\\n   *\\n   * @param _token The address of the token bridged\\n   * @param _axelarGateway The address of the AxelarGateway contract\\n   * @param _gasService The address of the AxelarGasService contract\\n   * @param owner The owner of the contract\\n   */\\n  constructor(\\n    address _token,\\n    address _axelarGateway,\\n    address _gasService,\\n    address owner\\n  ) {\\n    TOKEN = IRWALike(_token);\\n    AXELAR_GATEWAY = IAxelarGateway(_axelarGateway);\\n    GAS_RECEIVER = IAxelarGasService(_gasService);\\n    _transferOwnership(owner);\\n    CHAIN_ID = block.chainid;\\n  }\\n\\n  /**\\n   * @notice Burns tokens on the source Chain and calls AxelarGateway contract\\n   *         to mint tokens on the destination chain\\n   *\\n   * @param amount The amount of tokens to burn\\n   * @param destinationChain The destination chain to mint tokens on\\n   *\\n   * @dev The amount of tokens to mint is the same as the amount burned\\n   * @dev User must approve `amount` tokens to this contract before bridging\\n   */\\n  function burnAndCallAxelar(\\n    uint256 amount,\\n    string calldata destinationChain\\n  ) external payable whenNotPaused {\\n    // Ensure that some gas is sent\\n    if (msg.value == 0) {\\n      revert GasFeeTooLow();\\n    }\\n\\n    // Ensure that amount bridged is not zero\\n    if (amount == 0) {\\n      revert CannotBridgeZero();\\n    }\\n\\n    // Check destinationChain is correct\\n    string memory destContract = destChainToContractAddr[destinationChain];\\n\\n    if (bytes(destContract).length == 0) {\\n      revert DestinationNotSupported();\\n    }\\n\\n    // burn amount\\n    TOKEN.burnFrom(msg.sender, amount);\\n\\n    bytes memory payload = abi.encode(\\n      VERSION,\\n      CHAIN_ID,\\n      msg.sender,\\n      amount,\\n      nonce++\\n    );\\n\\n    _payGasAndCallContract(destinationChain, destContract, payload);\\n    emit BridgeInitiated(msg.sender, nonce - 1, CHAIN_ID, VERSION, amount);\\n  }\\n\\n  /**\\n   * @notice Helper function that pays gas and calls the AxelarGateway contract\\n   *\\n   * @param destinationChain The destination chain to mint tokens on\\n   * @param destContract The contract address on the destination chain\\n   * @param payload The payload to send to the AxelarGateway contract\\n   */\\n  function _payGasAndCallContract(\\n    string calldata destinationChain,\\n    string memory destContract,\\n    bytes memory payload\\n  ) private {\\n    GAS_RECEIVER.payNativeGasForContractCall{value: msg.value}(\\n      address(this),\\n      destinationChain,\\n      destContract,\\n      payload,\\n      msg.sender\\n    );\\n\\n    // Send all information to AxelarGateway contract.\\n    AXELAR_GATEWAY.callContract(destinationChain, destContract, payload);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          Admin Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Sets the destination chain to contract address mapping\\n   *\\n   * @param destinationChain The destination chain\\n   * @param contractAddress The contract address on the destination chain\\n   *\\n   * @dev Chain name must come from list of supported chains\\n   *      at https://docs.axelar.dev/dev/reference/mainnet-chain-names\\n   */\\n  function setDestinationChainContractAddress(\\n    string calldata destinationChain,\\n    address contractAddress\\n  ) external onlyOwner {\\n    destChainToContractAddr[destinationChain] = AddressToString.toString(\\n      contractAddress\\n    );\\n    emit DestinationChainContractAddressSet(destinationChain, contractAddress);\\n  }\\n\\n  /**\\n   * @notice Deletes an entry w/n the destination chain to contract address\\n   *         mapping\\n   *\\n   * @param destinationChain The destination chain to disallow\\n   */\\n  function removeDestinationChainContractAddress(\\n    string calldata destinationChain\\n  ) external onlyOwner {\\n    delete destChainToContractAddr[destinationChain];\\n    emit ChainSupportRemoved(destinationChain);\\n  }\\n\\n  /**\\n   * @notice Admin function to pause the contract\\n   *\\n   * @dev Only used for bridge functions\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Admin function to unpause the contract\\n   *\\n   * @dev Only used for bridge functions\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Allows for arbitrary batched calls\\n   *\\n   * @dev All external calls made through this function will\\n   *      msg.sender == contract address\\n   *\\n   * @param exCallData Struct consisting of\\n   *       1) target - contract to call\\n   *       2) data - data to call target with\\n   *       3) value - eth value to call target with\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exCallData\\n  ) external payable override onlyOwner returns (bytes[] memory results) {\\n    results = new bytes[](exCallData.length);\\n    for (uint256 i = 0; i < exCallData.length; ++i) {\\n      (bool success, bytes memory ret) = address(exCallData[i].target).call{\\n        value: exCallData[i].value\\n      }(exCallData[i].data);\\n      require(success, \\\"Call Failed\\\");\\n      results[i] = ret;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Events & Errors\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Event emitted when the destination chain to contract address mapping is set\\n   *\\n   * @param destinationChain The destination chain\\n   * @param contractAddress The contract address on the destination chain\\n   */\\n  event DestinationChainContractAddressSet(\\n    string indexed destinationChain,\\n    address contractAddress\\n  );\\n\\n  /**\\n   * @notice Event emitted when a message is passed to an Axelar gateway\\n   *\\n   * @param user    The account initiating the msg pass\\n   * @param nonce   The nonce of the src bridge for this msg pass\\n   * @param chainId The chainId of the chain which the src bridge is deployed to\\n   * @param version The payload version\\n   * @param amount  The amount field in the msg being passed\\n   */\\n  event BridgeInitiated(\\n    address indexed user,\\n    uint256 indexed nonce,\\n    uint256 indexed chainId,\\n    bytes32 version,\\n    uint256 amount\\n  );\\n  /**\\n   * @notice Event emitted when the destination chain to contract address mapping is\\n   *         deleted\\n   *\\n   * @param destinationChain The destination chain to be removed;\\n   */\\n  event ChainSupportRemoved(string indexed destinationChain);\\n\\n  // Errors\\n  error DestinationNotSupported();\\n  error GasFeeTooLow();\\n  error CannotBridgeZero();\\n}\\n\",\"keccak256\":\"0x8209e889b0c98dab64227e9527d1021e5dc074bc362e80380a954a6b26a9a0aa\",\"license\":\"BUSL-1.1\"},\"contracts/external/axelar/StringAddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n  error InvalidAddressString();\\n\\n  function toAddress(\\n    string memory addressString\\n  ) internal pure returns (address) {\\n    bytes memory stringBytes = bytes(addressString);\\n    uint160 addressNumber = 0;\\n    uint8 stringByte;\\n\\n    if (\\n      stringBytes.length != 42 || stringBytes[0] != \\\"0\\\" || stringBytes[1] != \\\"x\\\"\\n    ) revert InvalidAddressString();\\n\\n    for (uint256 i = 2; i < 42; ++i) {\\n      stringByte = uint8(stringBytes[i]);\\n\\n      if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n      else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n      else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n      else revert InvalidAddressString();\\n\\n      addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n    }\\n    return address(addressNumber);\\n  }\\n}\\n\\nlibrary AddressToString {\\n  function toString(address addr) internal pure returns (string memory) {\\n    bytes memory addressBytes = abi.encodePacked(addr);\\n    uint256 length = addressBytes.length;\\n    bytes memory characters = \\\"0123456789abcdef\\\";\\n    bytes memory stringBytes = new bytes(2 + addressBytes.length * 2);\\n\\n    stringBytes[0] = \\\"0\\\";\\n    stringBytes[1] = \\\"x\\\";\\n\\n    for (uint256 i; i < length; ++i) {\\n      stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n      stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n    }\\n    return string(stringBytes);\\n  }\\n}\\n\",\"keccak256\":\"0x67510c961e11096237f87f6cbbcb866a19a211c0032dbac1c95af90a55c11ce7\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xbf98487e973eb344f5ba44644c1bc13a4bbabff2b7d9c90f2550d5b92a241c0d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n  /**\\n   * @dev Emitted when the pause is triggered by `account`.\\n   */\\n  event Paused(address account);\\n\\n  /**\\n   * @dev Emitted when the pause is lifted by `account`.\\n   */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n   * @dev Initializes the contract in unpaused state.\\n   */\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Triggers stopped state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns to normal state.\\n   *\\n   * Requirements:\\n   *\\n   * - The contract must be paused.\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\\n\",\"keccak256\":\"0x89d86c3d3b1ee8d8e205f60b3456af62f4655d42be3ee542efd1e3f50f45090f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n  // This is called on the source chain before calling the gateway to execute a remote contract.\\n  function payNativeGasForContractCall(\\n    address sender,\\n    string calldata destinationChain,\\n    string calldata destinationAddress,\\n    bytes calldata payload,\\n    address refundAddress\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xf693ecdd4e3f7d2f3d043028a0d03ce283fef6c759d8fa9f183734b2adba47d5\",\"license\":\"MIT\"},\"contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n  function callContract(\\n    string calldata destinationChain,\\n    string calldata contractAddress,\\n    bytes calldata payload\\n  ) external;\\n\\n  function validateContractCall(\\n    bytes32 commandId,\\n    string calldata sourceChain,\\n    string calldata sourceAddress,\\n    bytes32 payloadHash\\n  ) external returns (bool);\\n\\n  function validateContractCallAndMint(\\n    bytes32 commandId,\\n    string calldata sourceChain,\\n    string calldata sourceAddress,\\n    bytes32 payloadHash,\\n    string calldata symbol,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x48e6bdbfc33402560b64dbc16db540502a3dac837148cf7f19bfe21ed3d467bc\",\"license\":\"MIT\"},\"contracts/interfaces/IMulticall.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IMulticall\\n * @author Ondo Finance\\n * @notice This interface dictates the required external functions for Ondo's\\n *         multicall contract.\\n */\\ninterface IMulticall {\\n  /// @dev External call data structure\\n  struct ExCallData {\\n    // The contract we intend to call\\n    address target;\\n    // The encoded function data for the call\\n    bytes data;\\n    // The ether value to be sent in the call\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Batches multiple function calls to different target contracts\\n   *         and returns the resulting data provided all calls were successful\\n   *\\n   * @dev The `msg.sender` is always the contract from which this function\\n   *      is being called\\n   *\\n   * @param exdata The ExCallData struct array containing the information\\n   *               regarding which contract to call, what data to call with,\\n   *               and what ether value to send along with the call\\n   *\\n   * @return results The resulting data returned from each call made\\n   */\\n  function multiexcall(\\n    ExCallData[] calldata exdata\\n  ) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x2f95edb9bab30fd936adb23f532e9800d62b03fbc78d573cce0f750e0f0d36f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n */\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dc5e9e98d1a66c0b7708f5aeb874182fc0d03255c4d1bf97f8553f7e77dea71\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638456cb59116100855780638456cb591461021157806385e1f4d0146102265780638da5cb5b14610268578063936bffd91461027d57806398b3653c1461029d578063a59b4b3a146102bd578063affed0e0146102f1578063f2fde38b14610307578063ffa1ad741461032757600080fd5b8062f2b3ec146100e25780633297a1261461012c5780633f4ba83a1461014e5780635a3c605e146101635780635c975abb14610190578063715018a6146101b5578063771cb6a8146101ca57806382bfefc8146101dd575b600080fd5b3480156100ee57600080fd5b506101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516101239190611044565b60405180910390f35b34801561013857600080fd5b5061014c6101473660046110a0565b610341565b005b34801561015a57600080fd5b5061014c6103e9565b34801561016f57600080fd5b5061018361017e3660046110f7565b610422565b60405161012391906111ed565b34801561019c57600080fd5b506101a56104c7565b6040519015158152602001610123565b3480156101c157600080fd5b5061014c6104d7565b61014c6101d8366004611207565b610510565b3480156101e957600080fd5b506101167f000000000000000000000000000000000000000000000000000000000000000081565b34801561021d57600080fd5b5061014c6107cd565b34801561023257600080fd5b5061025a7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610123565b34801561027457600080fd5b50610116610804565b61029061028b366004611252565b610813565b60405161012391906112c6565b3480156102a957600080fd5b5061014c6102b8366004611344565b6109fd565b3480156102c957600080fd5b506101167f000000000000000000000000000000000000000000000000000000000000000081565b3480156102fd57600080fd5b5061025a60025481565b34801561031357600080fd5b5061014c610322366004611397565b610ab6565b34801561033357600080fd5b5061025a620312e360ec1b81565b3361034a610804565b6001600160a01b0316146103795760405162461bcd60e51b8152600401610370906113b2565b60405180910390fd5b6001828260405161038b9291906113e7565b908152602001604051809103902060006103a59190610ff6565b81816040516103b59291906113e7565b604051908190038120907f158a044d8042048b13e12437e2777a46dd46a6be69ebe30470c49532a17307c290600090a25050565b336103f2610804565b6001600160a01b0316146104185760405162461bcd60e51b8152600401610370906113b2565b610420610b56565b565b805160208183018101805160018252928201919093012091528054610446906113f7565b80601f0160208091040260200160405190810160405280929190818152602001828054610472906113f7565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b505050505081565b600054600160a01b900460ff1690565b336104e0610804565b6001600160a01b0316146105065760405162461bcd60e51b8152600401610370906113b2565b6104206000610be8565b6105186104c7565b156105355760405162461bcd60e51b815260040161037090611431565b346000036105565760405163f4f7e42b60e01b815260040160405180910390fd5b826000036105775760405163d74b168d60e01b815260040160405180910390fd5b60006001838360405161058b9291906113e7565b908152602001604051809103902080546105a4906113f7565b80601f01602080910402602001604051908101604052809291908181526020018280546105d0906113f7565b801561061d5780601f106105f25761010080835404028352916020019161061d565b820191906000526020600020905b81548152906001019060200180831161060057829003601f168201915b505050505090508051600003610646576040516359f521b760e01b815260040160405180910390fd5b60405163079cc67960e41b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b505050506000620312e360ec1b7f000000000000000000000000000000000000000000000000000000000000000033876002600081548092919061070590611471565b909155506040805160208101969096528501939093526001600160a01b039091166060840152608083015260a082015260c001604051602081830303815290604052905061075584848484610c38565b7f00000000000000000000000000000000000000000000000000000000000000006001600254610785919061148a565b60408051620312e360ec1b81526020810189905233917f719ab00511e884d1ea4921ee843132435dc006b0bb7f8b67fb693b621e45bb53910160405180910390a45050505050565b336107d6610804565b6001600160a01b0316146107fc5760405162461bcd60e51b8152600401610370906113b2565b610420610d4c565b6000546001600160a01b031690565b60603361081e610804565b6001600160a01b0316146108445760405162461bcd60e51b8152600401610370906113b2565b816001600160401b0381111561085c5761085c6110e1565b60405190808252806020026020018201604052801561088f57816020015b606081526020019060019003908161087a5790505b50905060005b828110156109f6576000808585848181106108b2576108b26114a3565b90506020028101906108c491906114b9565b6108d2906020810190611397565b6001600160a01b03168686858181106108ed576108ed6114a3565b90506020028101906108ff91906114b9565b60400135878786818110610915576109156114a3565b905060200281019061092791906114b9565b6109359060208101906114d9565b6040516109439291906113e7565b60006040518083038185875af1925050503d8060008114610980576040519150601f19603f3d011682016040523d82523d6000602084013e610985565b606091505b5091509150816109c55760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0811985a5b195960aa1b6044820152606401610370565b808484815181106109d8576109d86114a3565b60200260200101819052505050806109ef90611471565b9050610895565b5092915050565b33610a06610804565b6001600160a01b031614610a2c5760405162461bcd60e51b8152600401610370906113b2565b610a3581610dac565b60018484604051610a479291906113e7565b90815260200160405180910390209081610a61919061156e565b508282604051610a729291906113e7565b60405180910390207fc78dabf274f05064c785f85d36cbaa36322ebcd04f3dd2e8723b4b8805928e2082604051610aa99190611044565b60405180910390a2505050565b33610abf610804565b6001600160a01b031614610ae55760405162461bcd60e51b8152600401610370906113b2565b6001600160a01b038116610b4a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610370565b610b5381610be8565b50565b610b5e6104c7565b610ba15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610370565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610bde9190611044565b60405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051630c93e3bb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb903490610c9090309089908990899089903390600401611656565b6000604051808303818588803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350631c92115f9250610d14915087908790879087906004016116b6565b600060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b5050505050505050565b610d546104c7565b15610d715760405162461bcd60e51b815260040161037090611431565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bd13390565b604051606082811b6bffffffffffffffffffffffff191660208301529060009060340160408051601f198184030181528282528051838301909252601083526f181899199a1a9b1b9c1cb0b131b232b360811b60208401528051909350909190600090610e1a9060026116fb565b610e2590600261171a565b6001600160401b03811115610e3c57610e3c6110e1565b6040519080825280601f01601f191660200182016040528015610e66576020820181803683370190505b509050600360fc1b81600081518110610e8157610e816114a3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610eb057610eb06114a3565b60200101906001600160f81b031916908160001a90535060005b83811015610fec57826004868381518110610ee757610ee76114a3565b016020015182516001600160f81b031990911690911c60f81c908110610f0f57610f0f6114a3565b01602001516001600160f81b03191682610f2a8360026116fb565b610f3590600261171a565b81518110610f4557610f456114a3565b60200101906001600160f81b031916908160001a90535082858281518110610f6f57610f6f6114a3565b602091010151815160f89190911c600f16908110610f8f57610f8f6114a3565b01602001516001600160f81b03191682610faa8360026116fb565b610fb590600361171a565b81518110610fc557610fc56114a3565b60200101906001600160f81b031916908160001a905350610fe581611471565b9050610eca565b5095945050505050565b508054611002906113f7565b6000825580601f10611012575050565b601f016020900490600052602060002090810190610b5391905b80821115611040576000815560010161102c565b5090565b6001600160a01b0391909116815260200190565b60008083601f84011261106a57600080fd5b5081356001600160401b0381111561108157600080fd5b60208301915083602082850101111561109957600080fd5b9250929050565b600080602083850312156110b357600080fd5b82356001600160401b038111156110c957600080fd5b6110d585828601611058565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561110957600080fd5b81356001600160401b038082111561112057600080fd5b818401915084601f83011261113457600080fd5b813581811115611146576111466110e1565b604051601f8201601f19908116603f0116810190838211818310171561116e5761116e6110e1565b8160405282815287602084870101111561118757600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815180845260005b818110156111cd576020818501810151868301820152016111b1565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061120060208301846111a7565b9392505050565b60008060006040848603121561121c57600080fd5b8335925060208401356001600160401b0381111561123957600080fd5b61124586828701611058565b9497909650939450505050565b6000806020838503121561126557600080fd5b82356001600160401b038082111561127c57600080fd5b818501915085601f83011261129057600080fd5b81358181111561129f57600080fd5b8660208260051b85010111156112b457600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561131b57603f198886030184526113098583516111a7565b945092850192908501906001016112ed565b5092979650505050505050565b80356001600160a01b038116811461133f57600080fd5b919050565b60008060006040848603121561135957600080fd5b83356001600160401b0381111561136f57600080fd5b61137b86828701611058565b909450925061138e905060208501611328565b90509250925092565b6000602082840312156113a957600080fd5b61120082611328565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8183823760009101908152919050565b600181811c9082168061140b57607f821691505b60208210810361142b57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000600182016114835761148361145b565b5060010190565b8181038181111561149d5761149d61145b565b92915050565b634e487b7160e01b600052603260045260246000fd5b60008235605e198336030181126114cf57600080fd5b9190910192915050565b6000808335601e198436030181126114f057600080fd5b8301803591506001600160401b0382111561150a57600080fd5b60200191503681900382131561109957600080fd5b601f82111561156957600081815260208120601f850160051c810160208610156115465750805b601f850160051c820191505b8181101561156557828155600101611552565b5050505b505050565b81516001600160401b03811115611587576115876110e1565b61159b8161159584546113f7565b8461151f565b602080601f8311600181146115d057600084156115b85750858301515b600019600386901b1c1916600185901b178555611565565b600085815260208120601f198616915b828110156115ff578886015182559484019460019091019084016115e0565b508582101561161d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808916835260a0602084015261167960a08401888a61162d565b838103604085015261168b81886111a7565b9050838103606085015261169f81876111a7565b925050808416608084015250979650505050505050565b6060815260006116ca60608301868861162d565b82810360208401526116dc81866111a7565b905082810360408401526116f081856111a7565b979650505050505050565b60008160001904831182151516156117155761171561145b565b500290565b8082018082111561149d5761149d61145b56fea264697066735822122006206d2119fb6d36ddb9db76db97a5ca460acc5a04b74e5c6d40891015ba772e64736f6c63430008100033",
  "devdoc": {
    "events": {
      "BridgeInitiated(address,uint256,uint256,bytes32,uint256)": {
        "params": {
          "amount": "The amount field in the msg being passed",
          "chainId": "The chainId of the chain which the src bridge is deployed to",
          "nonce": "The nonce of the src bridge for this msg pass",
          "user": "The account initiating the msg pass",
          "version": "The payload version"
        }
      },
      "ChainSupportRemoved(string)": {
        "params": {
          "destinationChain": "The destination chain to be removed;"
        }
      },
      "DestinationChainContractAddressSet(string,address)": {
        "params": {
          "contractAddress": "The contract address on the destination chain",
          "destinationChain": "The destination chain"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "burnAndCallAxelar(uint256,string)": {
        "details": "The amount of tokens to mint is the same as the amount burnedUser must approve `amount` tokens to this contract before bridging",
        "params": {
          "amount": "The amount of tokens to burn",
          "destinationChain": "The destination chain to mint tokens on"
        }
      },
      "constructor": {
        "params": {
          "_axelarGateway": "The address of the AxelarGateway contract",
          "_gasService": "The address of the AxelarGasService contract",
          "_token": "The address of the token bridged",
          "owner": "The owner of the contract"
        }
      },
      "multiexcall((address,bytes,uint256)[])": {
        "details": "All external calls made through this function will      msg.sender == contract address",
        "params": {
          "exCallData": "Struct consisting of       1) target - contract to call       2) data - data to call target with       3) value - eth value to call target with"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only used for bridge functions"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeDestinationChainContractAddress(string)": {
        "params": {
          "destinationChain": "The destination chain to disallow"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDestinationChainContractAddress(string,address)": {
        "details": "Chain name must come from list of supported chains      at https://docs.axelar.dev/dev/reference/mainnet-chain-names",
        "params": {
          "contractAddress": "The contract address on the destination chain",
          "destinationChain": "The destination chain"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only used for bridge functions"
      }
    },
    "stateVariables": {
      "destChainToContractAddr": {
        "details": "Axelar uses the string representation of addresses, hence we store      the address as a string"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BridgeInitiated(address,uint256,uint256,bytes32,uint256)": {
        "notice": "Event emitted when a message is passed to an Axelar gateway"
      },
      "ChainSupportRemoved(string)": {
        "notice": "Event emitted when the destination chain to contract address mapping is         deleted"
      },
      "DestinationChainContractAddressSet(string,address)": {
        "notice": "Event emitted when the destination chain to contract address mapping is set"
      }
    },
    "kind": "user",
    "methods": {
      "AXELAR_GATEWAY()": {
        "notice": "Pointer  to AxelarGateway contract"
      },
      "CHAIN_ID()": {
        "notice": "src Chain Id, used to salt txnHash on dst Chain"
      },
      "GAS_RECEIVER()": {
        "notice": "Pointer to AxelarGasService contract"
      },
      "TOKEN()": {
        "notice": "Token contract bridged by this contract"
      },
      "VERSION()": {
        "notice": "Versioning for payload"
      },
      "burnAndCallAxelar(uint256,string)": {
        "notice": "Burns tokens on the source Chain and calls AxelarGateway contract         to mint tokens on the destination chain"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "destChainToContractAddr(string)": {
        "notice": "Mapping from destination chain to bridge address on that chain"
      },
      "multiexcall((address,bytes,uint256)[])": {
        "notice": "Allows for arbitrary batched calls"
      },
      "nonce()": {
        "notice": "Monotonically increasing nonce for each transaction"
      },
      "pause()": {
        "notice": "Admin function to pause the contract"
      },
      "removeDestinationChainContractAddress(string)": {
        "notice": "Deletes an entry w/n the destination chain to contract address         mapping"
      },
      "setDestinationChainContractAddress(string,address)": {
        "notice": "Sets the destination chain to contract address mapping"
      },
      "unpause()": {
        "notice": "Admin function to unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10602,
        "contract": "contracts/bridge/SourceBridge.sol:SourceBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11543,
        "contract": "contracts/bridge/SourceBridge.sol:SourceBridge",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4372,
        "contract": "contracts/bridge/SourceBridge.sol:SourceBridge",
        "label": "destChainToContractAddr",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 4391,
        "contract": "contracts/bridge/SourceBridge.sol:SourceBridge",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}