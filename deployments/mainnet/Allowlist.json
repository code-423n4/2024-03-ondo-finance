{
  "address": "0x13300511f43768a30bb2bf10b63B6d502D1F7FE5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVerified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTermIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVSignature",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "AccountAddedFromSignature",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        }
      ],
      "name": "AccountAddedSelf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AccountStatusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AccountStatusSetByAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIndex",
          "type": "uint256"
        }
      ],
      "name": "CurrentTermIndexSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashedMessage",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        }
      ],
      "name": "TermAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "oldIndexes",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "newIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "ValidTermIndexesSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ALLOWLIST_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALLOWLIST_SETTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "addAccountToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        }
      ],
      "name": "addSelfToAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "term",
          "type": "string"
        }
      ],
      "name": "addTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTermIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTerm",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidTermIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "termIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setAccountStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentTermIndex",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTermIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_validIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "setValidTermIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verifications",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "solcInputHash": "2bf7682020e60daa8b926519f6d5921d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVerified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTermIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"AccountAddedFromSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"}],\"name\":\"AccountAddedSelf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AccountStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AccountStatusSetByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"}],\"name\":\"CurrentTermIndexSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashedMessage\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"}],\"name\":\"TermAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldIndexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newIndexes\",\"type\":\"uint256[]\"}],\"name\":\"ValidTermIndexesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALLOWLIST_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALLOWLIST_SETTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addAccountToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"}],\"name\":\"addSelfToAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"term\",\"type\":\"string\"}],\"name\":\"addTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTermIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTerm\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTermIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAccountStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentTermIndex\",\"type\":\"uint256\"}],\"name\":\"setCurrentTermIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_validIndexes\",\"type\":\"uint256[]\"}],\"name\":\"setValidTermIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifications\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ondo Finance\",\"kind\":\"dev\",\"methods\":{\"addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)\":{\"params\":{\"account\":\"Address of the account to add to the allowlist\",\"r\":\"r component of the signature\",\"s\":\"s component of the signature\",\"termIndex\":\"Term index for which the user is adding themselves to the                  allowlist\",\"v\":\"v component of the signature\"}},\"addSelfToAllowlist(uint256)\":{\"params\":{\"termIndex\":\"Term index for which the user is adding themselves to the                  allowlist\"}},\"addTerm(string)\":{\"details\":\"This function sets the current term index as the added termThe added term is not valid until it's added to validIndexes\",\"params\":{\"term\":\"Term to add\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAllowed(address)\":{\"details\":\"Contracts are always allowed. Any entity that has signed a valid term      or added themselves to the allowslit for a valid term will pass the      check\",\"params\":{\"account\":\"Address of the account to check\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAccountStatus(address,uint256,bool)\":{\"details\":\"If a user's status has been set to false, a user can then set their      status back to true. This behavior is known. The allowlist should be      used in conjunction with a blocklist\",\"params\":{\"account\":\"Address of the account to set the status for\",\"status\":\"New status of the account\",\"termIndex\":\"Term index for which to update status for\"}},\"setCurrentTermIndex(uint256)\":{\"details\":\"The current term index is not a valid term until it's added to      validIndexesThis function will revert if the `_currentTermIndex` out of bounds      of the terms array\",\"params\":{\"_currentTermIndex\":\"New current term index\"}},\"setValidTermIndexes(uint256[])\":{\"details\":\"Once the validIndexes are set, any user who has been verified to sign      a particular term will pass the `isAllowed` check\",\"params\":{\"_validIndexes\":\"List of new valid term indexes\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"ALLOWLIST_ADMIN\":{\"details\":\"Role based access control roles\"},\"verifications\":{\"details\":\"{<EOA> : {<term index> : <is verified>}};\"}},\"title\":\"AllowlistUpgradeable\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidTermIndex()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Event emitted when an account is added to the allowlist by a signature\"},\"AccountAddedSelf(address,uint256)\":{\"notice\":\"Event emitted when an account adds itself added to the allowlist\"},\"AccountStatusSet(address,uint256,bool)\":{\"notice\":\"Event emitted when an account status is set\"},\"AccountStatusSetByAdmin(address,uint256,bool)\":{\"notice\":\"Event emitted when an accoun status is set by an admin\"},\"CurrentTermIndexSet(uint256,uint256)\":{\"notice\":\"Event emitted when the current term index is set\"},\"TermAdded(bytes32,uint256)\":{\"notice\":\"Event emitted when a term is added\"},\"ValidTermIndexesSet(uint256[],uint256[])\":{\"notice\":\"Event emitted when the valid term indexes are set\"}},\"kind\":\"user\",\"methods\":{\"addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)\":{\"notice\":\"Function that allows anyone to add a user to the allowlist with a         given off-chain signature\"},\"addSelfToAllowlist(uint256)\":{\"notice\":\"Function that allows a user to add themselves to the allowlist         for a given `termIndex`\"},\"addTerm(string)\":{\"notice\":\"Adds a term to the list of possible terms\"},\"getCurrentTerm()\":{\"notice\":\"Returns the current terms string associated with the         `currentTermIndex`\"},\"getValidTermIndexes()\":{\"notice\":\"Gets a list term indexes that are valid for a user to be on the         allowlist\"},\"isAllowed(address)\":{\"notice\":\"Function that checks whether a user passes the allowlist check\"},\"setAccountStatus(address,uint256,bool)\":{\"notice\":\"Admin function to set an accounts status for a given term index\"},\"setCurrentTermIndex(uint256)\":{\"notice\":\"Sets the current term index\"},\"setValidTermIndexes(uint256[])\":{\"notice\":\"Sets the list of valid term indexes\"}},\"notice\":\"This contract manages the allowlist status for accounts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/usdy/allowlist/AllowlistUpgradeable.sol\":\"AllowlistUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is\\n  Initializable,\\n  IAccessControlEnumerableUpgradeable,\\n  AccessControlUpgradeable\\n{\\n  function __AccessControlEnumerable_init() internal onlyInitializing {}\\n\\n  function __AccessControlEnumerable_init_unchained()\\n    internal\\n    onlyInitializing\\n  {}\\n\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8e289e9c791884b3c536b13b5a3cf0f48bbb78df3bf8d182a89679e62a06bbcd\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  IAccessControlUpgradeable,\\n  ERC165Upgradeable\\n{\\n  function __AccessControl_init() internal onlyInitializing {}\\n\\n  function __AccessControl_init_unchained() internal onlyInitializing {}\\n\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role);\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\n   *\\n   * Format of the revert message is described in {_checkRole}.\\n   *\\n   * _Available since v4.6._\\n   */\\n  function _checkRole(bytes32 role) internal view virtual {\\n    _checkRole(role, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            StringsUpgradeable.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            StringsUpgradeable.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * May emit a {RoleGranted} event.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleGranted} event.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   *\\n   * May emit a {RoleRevoked} event.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7ac1155e2192229ae94148937eeade68dc9faadfec3ad1f7e320b4a74692b5a1\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09b3aa1d18fc1d83df71a6c0599c6eb33682f98af5a9ad559629bfcf043465ab\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x82ced39d1596c05d590b7ca07c3817cf45cd27c08668c4ed630897861a394897\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) ||\\n        (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint8 version) {\\n    require(\\n      !_initializing && _initialized < version,\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized < type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x010a43b8420b86f8e3c27e0647eff1d1e9b2a923826043a5141164c828c05bf5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaf21ac76d103d3d1174d2bd26dde385c09f1bab9a60ec291c130efc8ccb20d36\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n  function __Context_init() internal onlyInitializing {}\\n\\n  function __Context_init_unchained() internal onlyInitializing {}\\n\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc333158994f7724934ae32da3bd03a4e816446808bac93df1d3f0c044e469e62\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n  function __ERC165_init() internal onlyInitializing {}\\n\\n  function __ERC165_init_unchained() internal onlyInitializing {}\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165Upgradeable).interfaceId;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x19f33d4901eb8c8b0dd5ff1e85076299f31a0841f75fb7472689d4c1257d9b1d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xcfd889f86aa7523f1a9b7903c24ced3512ed3ba14d27372a75a07e9c49ed141b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x26751ffef7dd0b030529f36b653b20561de1eff524eea9b401b614d454a33c5b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0x14695559487022a2e893608ca1700670171e471003a4cced204acf93811d123d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\n\\ninterface IAllowlist {\\n  function addTerm(string calldata term) external;\\n\\n  function setCurrentTermIndex(uint256 _currentTermIndex) external;\\n\\n  function setValidTermIndexes(uint256[] calldata indexes) external;\\n\\n  function isAllowed(address account) external view returns (bool);\\n\\n  function getCurrentTerm() external view returns (string memory);\\n\\n  function getValidTermIndexes() external view returns (uint256[] memory);\\n\\n  function addAccountToAllowlist(\\n    uint256 _currentTermIndex,\\n    address account,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function addSelfToAllowlist(uint256 termIndex) external;\\n\\n  function setAccountStatus(\\n    address account,\\n    uint256 termIndex,\\n    bool status\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when a term is added\\n   *\\n   * @param hashedMessage The hash of the terms string that was added\\n   * @param termIndex     The index of the term that was added\\n   */\\n  event TermAdded(bytes32 hashedMessage, uint256 termIndex);\\n\\n  /**\\n   * @notice Event emitted when the current term index is set\\n   *\\n   * @param oldIndex The old current term index\\n   * @param newIndex The new current term index\\n   */\\n  event CurrentTermIndexSet(uint256 oldIndex, uint256 newIndex);\\n\\n  /**\\n   * @notice Event emitted when the valid term indexes are set\\n   *\\n   * @param oldIndexes The old valid term indexes\\n   * @param newIndexes The new valid term indexes\\n   */\\n  event ValidTermIndexesSet(uint256[] oldIndexes, uint256[] newIndexes);\\n\\n  /**\\n   * @notice Event emitted when an accoun status is set by an admin\\n   *\\n   * @param account   The account whose status was set\\n   * @param termIndex The term index of the account whose status that was set\\n   * @param status    The new status of the account\\n   */\\n  event AccountStatusSetByAdmin(\\n    address indexed account,\\n    uint256 indexed termIndex,\\n    bool status\\n  );\\n\\n  /**\\n   * @notice Event emitted when an account adds itself added to the allowlist\\n   *\\n   * @param account   The account that was added\\n   * @param termIndex The term index for which the account was added\\n   */\\n  event AccountAddedSelf(address indexed account, uint256 indexed termIndex);\\n\\n  /**\\n   * @notice Event emitted when an account is added to the allowlist by a signature\\n   *\\n   * @param account   The account that was added\\n   * @param termIndex The term index for which the account was added\\n   * @param v         The v value of the signature\\n   * @param r         The r value of the signature\\n   * @param s         The s value of the signature\\n   */\\n  event AccountAddedFromSignature(\\n    address indexed account,\\n    uint256 indexed termIndex,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  );\\n\\n  /**\\n   * @notice Event emitted when an account status is set\\n   *\\n   * @param account   The account whose status was set\\n   * @param termIndex The term index of the account whose status was set\\n   * @param status    The new status of the account\\n   */\\n  event AccountStatusSet(\\n    address indexed account,\\n    uint256 indexed termIndex,\\n    bool status\\n  );\\n\\n  /// ERRORS ///\\n  error InvalidTermIndex();\\n  error InvalidVSignature();\\n  error AlreadyVerified();\\n  error InvalidSigner();\\n}\\n\",\"keccak256\":\"0x7d1d7e212f8be7e1bc21d51161937c405c087d4751a01f419280f94e4613fd79\",\"license\":\"BUSL-1.1\"},\"contracts/usdy/allowlist/AllowlistUpgradeable.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\n\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\n\\n */\\npragma solidity 0.8.16;\\nimport \\\"contracts/external/openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"contracts/interfaces/IAllowlist.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title AllowlistUpgradeable\\n * @author Ondo Finance\\n * @notice This contract manages the allowlist status for accounts.\\n */\\ncontract AllowlistUpgradeable is\\n  Initializable,\\n  AccessControlEnumerableUpgradeable,\\n  IAllowlist\\n{\\n  /// @dev Role based access control roles\\n  bytes32 public constant ALLOWLIST_ADMIN = keccak256(\\\"ALLOWLIST_ADMIN\\\");\\n  bytes32 public constant ALLOWLIST_SETTER = keccak256(\\\"ALLOWLIST_SETTER\\\");\\n\\n  /// @dev {<EOA> : {<term index> : <is verified>}};\\n  mapping(address => mapping(uint256 => bool)) public verifications;\\n\\n  string[] public terms;\\n  uint256 public currentTermIndex = 0;\\n  uint256[] public validIndexes;\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address admin, address setter) public initializer {\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    _grantRole(ALLOWLIST_ADMIN, admin);\\n    _grantRole(ALLOWLIST_SETTER, setter);\\n  }\\n\\n  /**\\n   * @notice Gets a list term indexes that are valid for a user to be on the\\n   *         allowlist\\n   */\\n  function getValidTermIndexes()\\n    external\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    return validIndexes;\\n  }\\n\\n  /**\\n   * @notice Returns the current terms string associated with the\\n   *         `currentTermIndex`\\n   */\\n  function getCurrentTerm() external view override returns (string memory) {\\n    return terms[currentTermIndex];\\n  }\\n\\n  /**\\n   * @notice Adds a term to the list of possible terms\\n   *\\n   * @param term Term to add\\n   *\\n   * @dev This function sets the current term index as the added term\\n   * @dev The added term is not valid until it's added to validIndexes\\n   */\\n  function addTerm(\\n    string calldata term\\n  ) external override onlyRole(ALLOWLIST_ADMIN) {\\n    terms.push(term);\\n    setCurrentTermIndex(terms.length - 1);\\n    emit TermAdded(keccak256(bytes(term)), terms.length - 1);\\n  }\\n\\n  /**\\n   * @notice Sets the current term index\\n   *\\n   * @param _currentTermIndex New current term index\\n   *\\n   * @dev The current term index is not a valid term until it's added to\\n   *      validIndexes\\n   * @dev This function will revert if the `_currentTermIndex` out of bounds\\n   *      of the terms array\\n   */\\n  function setCurrentTermIndex(\\n    uint256 _currentTermIndex\\n  ) public override onlyRole(ALLOWLIST_ADMIN) {\\n    if (_currentTermIndex >= terms.length) {\\n      revert InvalidTermIndex();\\n    }\\n    uint256 oldIndex = currentTermIndex;\\n    currentTermIndex = _currentTermIndex;\\n    emit CurrentTermIndexSet(oldIndex, _currentTermIndex);\\n  }\\n\\n  /**\\n   * @notice Sets the list of valid term indexes\\n   *\\n   * @param _validIndexes List of new valid term indexes\\n   *\\n   * @dev Once the validIndexes are set, any user who has been verified to sign\\n   *      a particular term will pass the `isAllowed` check\\n   */\\n  function setValidTermIndexes(\\n    uint256[] calldata _validIndexes\\n  ) external override onlyRole(ALLOWLIST_ADMIN) {\\n    for (uint256 i; i < _validIndexes.length; ++i) {\\n      if (_validIndexes[i] >= terms.length) {\\n        revert InvalidTermIndex();\\n      }\\n    }\\n    uint256[] memory oldIndexes = validIndexes;\\n    validIndexes = _validIndexes;\\n    emit ValidTermIndexesSet(oldIndexes, _validIndexes);\\n  }\\n\\n  /**\\n   * @notice Function that checks whether a user passes the allowlist check\\n   *\\n   * @param account Address of the account to check\\n   *\\n   * @dev Contracts are always allowed. Any entity that has signed a valid term\\n   *      or added themselves to the allowslit for a valid term will pass the\\n   *      check\\n   */\\n  function isAllowed(address account) external view override returns (bool) {\\n    // Contracts are always allowed\\n    if (AddressUpgradeable.isContract(account)) {\\n      return true;\\n    }\\n\\n    uint256 validIndexesLength = validIndexes.length;\\n    for (uint256 i; i < validIndexesLength; ++i) {\\n      if (verifications[account][validIndexes[i]]) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @notice Function that allows a user to add themselves to the allowlist\\n   *         for a given `termIndex`\\n   *\\n   * @param termIndex Term index for which the user is adding themselves to the\\n   *                  allowlist\\n   */\\n  function addSelfToAllowlist(uint256 termIndex) external override {\\n    if (verifications[msg.sender][termIndex]) {\\n      revert AlreadyVerified();\\n    }\\n    _setAccountStatus(msg.sender, termIndex, true);\\n    emit AccountAddedSelf(msg.sender, termIndex);\\n  }\\n\\n  /**\\n   * @notice Admin function to set an accounts status for a given term index\\n   *\\n   * @param account   Address of the account to set the status for\\n   * @param termIndex Term index for which to update status for\\n   * @param status    New status of the account\\n   *\\n   * @dev If a user's status has been set to false, a user can then set their\\n   *      status back to true. This behavior is known. The allowlist should be\\n   *      used in conjunction with a blocklist\\n   */\\n  function setAccountStatus(\\n    address account,\\n    uint256 termIndex,\\n    bool status\\n  ) external override onlyRole(ALLOWLIST_SETTER) {\\n    _setAccountStatus(account, termIndex, status);\\n    emit AccountStatusSetByAdmin(account, termIndex, status);\\n  }\\n\\n  /**\\n   * @notice Function that allows anyone to add a user to the allowlist with a\\n   *         given off-chain signature\\n   *\\n   * @param termIndex Term index for which the user is adding themselves to the\\n   *                  allowlist\\n   * @param account   Address of the account to add to the allowlist\\n   * @param v         v component of the signature\\n   * @param r         r component of the signature\\n   * @param s         s component of the signature\\n   */\\n  function addAccountToAllowlist(\\n    uint256 termIndex,\\n    address account,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    if (verifications[account][termIndex]) {\\n      revert AlreadyVerified();\\n    }\\n\\n    if (v != 27 && v != 28) {\\n      revert InvalidVSignature();\\n    }\\n\\n    bytes32 hashedMessage = ECDSA.toEthSignedMessageHash(\\n      bytes(terms[termIndex])\\n    );\\n    address signer = ECDSA.recover(hashedMessage, v, r, s);\\n\\n    if (signer != account) {\\n      revert InvalidSigner();\\n    }\\n    _setAccountStatus(account, termIndex, true);\\n    emit AccountAddedFromSignature(account, termIndex, v, r, s);\\n  }\\n\\n  /**\\n   * @notice Internal function to set the status of an account for a given term\\n   *\\n   * @param account   Address of the account to set the status for\\n   * @param termIndex Term index for which to update status for\\n   * @param status    New status of the account\\n   */\\n  function _setAccountStatus(\\n    address account,\\n    uint256 termIndex,\\n    bool status\\n  ) internal {\\n    if (termIndex >= terms.length) {\\n      revert InvalidTermIndex();\\n    }\\n    verifications[account][termIndex] = status;\\n    emit AccountStatusSet(account, termIndex, status);\\n  }\\n}\\n\",\"keccak256\":\"0xfbbd9c51562db1d8900af58e3a857fc29e6d716a633f391ceb5f53707a3f80bf\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052600060cb5534801561001557600080fd5b5061001e610023565b6100e3565b600054610100900460ff161561008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611e69806100f26000396000f3fe608060405234801561001057600080fd5b50600436106101635760003560e01c806366e4b702116100ce578063a217fddf11610087578063a217fddf14610324578063babcc5391461032c578063c0aa0e8a1461033f578063ca15c87314610352578063d469d0c214610365578063d499ca5b14610378578063d547741f1461038b57600080fd5b806366e4b702146102a057806387a20680146102b55780639010d07c146102be57806390d63fa3146102e957806391d14854146102fc57806392ecf5771461030f57600080fd5b8063283762031161012057806328376203146102115780632c5783b1146102245780632f2ff15d1461023957806336568abe1461024c57806346db089d1461025f578063485cc9551461028d57600080fd5b806301ffc9a71461016857806302ffc7641461019057806308f419f4146101a5578063209b9833146101b8578063248a9ca3146101cd578063251e831b146101fe575b600080fd5b61017b610176366004611734565b61039e565b60405190151581526020015b60405180910390f35b6101a361019e36600461177a565b6103c9565b005b6101a36101b33660046117bf565b610438565b6101c06104b9565b6040516101879190611813565b6101f06101db3660046117bf565b60009081526065602052604090206001015490565b604051908152602001610187565b6101f061020c3660046117bf565b610511565b6101a361021f366004611826565b610532565b6101f0600080516020611df483398151915281565b6101a361024736600461187c565b610707565b6101a361025a36600461187c565b610731565b61017b61026d3660046118a8565b60c960209081526000928352604080842090915290825290205460ff1681565b6101a361029b3660046118d2565b6107b4565b6101f0600080516020611e1483398151915281565b6101f060cb5481565b6102d16102cc3660046118fc565b6108f1565b6040516001600160a01b039091168152602001610187565b6101a36102f73660046117bf565b610910565b61017b61030a36600461187c565b610988565b6103176109b3565b6040516101879190611942565b6101f0600081565b61017b61033a366004611975565b610a59565b61031761034d3660046117bf565b610af8565b6101f06103603660046117bf565b610ba4565b6101a3610373366004611990565b610bbb565b6101a3610386366004611a05565b610cd1565b6101a361039936600461187c565b610d98565b60006001600160e01b03198216635a05180f60e01b14806103c357506103c382610dbd565b92915050565b600080516020611e148339815191526103e181610df2565b6103ec848484610dff565b82846001600160a01b03167f8790cc6238d5595e48c16f8ab0f7bb594de43f92c9cededbc73f1043a5a195378460405161042a911515815260200190565b60405180910390a350505050565b600080516020611df483398151915261045081610df2565b60ca54821061047257604051636c8c0e7160e11b815260040160405180910390fd5b60cb80549083905560408051828152602081018590527f5e8daff369d4fc100bb21041db28b9959d722325e8e96d67f62cacf7430fcaa591015b60405180910390a1505050565b606060cc80548060200260200160405190810160405280929190818152602001828054801561050757602002820191906000526020600020905b8154815260200190600101908083116104f3575b5050505050905090565b60cc818154811061052157600080fd5b600091825260209091200154905081565b6001600160a01b038416600090815260c96020908152604080832088845290915290205460ff161561057757604051630231faf760e31b815260040160405180910390fd5b8260ff16601b1415801561058f57508260ff16601c14155b156105ad57604051632aea050d60e21b815260040160405180910390fd5b600061065d60ca87815481106105c5576105c5611a65565b9060005260206000200180546105da90611a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461060690611a7b565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050610e8c565b9050600061066d82868686610ec7565b9050856001600160a01b0316816001600160a01b0316146106a157604051632057875960e21b815260040160405180910390fd5b6106ad86886001610dff565b6040805160ff871681526020810186905290810184905287906001600160a01b038816907ff9e85d67fd10c2dd0202c1221003448f346b28afbeb3bcbcc4544ed032c049179060600160405180910390a350505050505050565b60008281526065602052604090206001015461072281610df2565b61072c8383610eef565b505050565b6001600160a01b03811633146107a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107b08282610f11565b5050565b600054610100900460ff16158080156107d45750600054600160ff909116105b806107ee5750303b1580156107ee575060005460ff166001145b6108515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161079d565b6000805460ff191660011790558015610874576000805461ff0019166101001790555b61087f600084610eef565b610897600080516020611df483398151915284610eef565b6108af600080516020611e1483398151915283610eef565b801561072c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016104ac565b60008281526097602052604081206109099083610f33565b9392505050565b33600090815260c96020908152604080832084845290915290205460ff161561094c57604051630231faf760e31b815260040160405180910390fd5b61095833826001610dff565b604051819033907f79abfa347949186dd2aab9e10622b23704ef7646387bfe22bf6a43b1de16fb3990600090a350565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca60cb54815481106109ca576109ca611a65565b9060005260206000200180546109df90611a7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0b90611a7b565b80156105075780601f10610a2d57610100808354040283529160200191610507565b820191906000526020600020905b815481529060010190602001808311610a3b57509395945050505050565b60006001600160a01b0382163b15610a7357506001919050565b60cc5460005b81811015610aee576001600160a01b038416600090815260c96020526040812060cc805491929184908110610ab057610ab0611a65565b6000918252602080832090910154835282019290925260400190205460ff1615610ade575060019392505050565b610ae781611acb565b9050610a79565b5060009392505050565b60ca8181548110610b0857600080fd5b906000526020600020016000915090508054610b2390611a7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4f90611a7b565b8015610b9c5780601f10610b7157610100808354040283529160200191610b9c565b820191906000526020600020905b815481529060010190602001808311610b7f57829003601f168201915b505050505081565b60008181526097602052604081206103c390610f3f565b600080516020611df4833981519152610bd381610df2565b60005b82811015610c285760ca54848483818110610bf357610bf3611a65565b9050602002013510610c1857604051636c8c0e7160e11b815260040160405180910390fd5b610c2181611acb565b9050610bd6565b50600060cc805480602002602001604051908101604052809291908181526020018280548015610c7757602002820191906000526020600020905b815481526020019060010190808311610c63575b50505050509050838360cc9190610c8f9291906116d4565b507f7a08cd4d8076e08d23c6543b0d17e2be01826237b85801f5217e43142d67b40b818585604051610cc393929190611ae4565b60405180910390a150505050565b600080516020611df4833981519152610ce981610df2565b60ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee101610d26838583611b92565b5060ca54610d3a906101b390600190611c53565b7fc51edb2a65671d8f55ac76a92007ffc21abbc32897ddc88fa4a3a4c4ed9607338383604051610d6b929190611c66565b60405190819003902060ca54610d8390600190611c53565b604080519283526020830191909152016104ac565b600082815260656020526040902060010154610db381610df2565b61072c8383610f11565b60006001600160e01b03198216637965db0b60e01b14806103c357506301ffc9a760e01b6001600160e01b03198316146103c3565b610dfc8133610f49565b50565b60ca548210610e2157604051636c8c0e7160e11b815260040160405180910390fd5b6001600160a01b038316600081815260c960209081526040808320868452825291829020805460ff191685151590811790915591519182528492917f66760e9ee1f8138c12bebf3adf6fae271560cf0f4e42ce31350bb4a5b7a8b462910160405180910390a3505050565b6000610e988251610fad565b82604051602001610eaa929190611c76565b604051602081830303815290604052805190602001209050919050565b6000806000610ed8878787876110b6565b91509150610ee581611170565b5095945050505050565b610ef982826112b5565b600082815260976020526040902061072c908261133b565b610f1b8282611350565b600082815260976020526040902061072c90826113b7565b600061090983836113cc565b60006103c3825490565b610f538282610988565b6107b057610f6b816001600160a01b031660146113f6565b610f768360206113f6565b604051602001610f87929190611cd1565b60408051601f198184030181529082905262461bcd60e51b825261079d91600401611942565b606081600003610fd45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ffe5780610fe881611acb565b9150610ff79050600a83611d56565b9150610fd8565b60008167ffffffffffffffff81111561101957611019611b2e565b6040519080825280601f01601f191660200182016040528015611043576020820181803683370190505b5090505b84156110ae57611058600183611c53565b9150611065600a86611d6a565b611070906030611d7e565b60f81b81838151811061108557611085611a65565b60200101906001600160f81b031916908160001a9053506110a7600a86611d56565b9450611047565b949350505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156110e35750600090506003611167565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611137573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661116057600060019250925050611167565b9150600090505b94509492505050565b600081600481111561118457611184611d91565b0361118c5750565b60018160048111156111a0576111a0611d91565b036111e85760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161079d565b60028160048111156111fc576111fc611d91565b036112495760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161079d565b600381600481111561125d5761125d611d91565b03610dfc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161079d565b6112bf8282610988565b6107b05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556112f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610909836001600160a01b038416611592565b61135a8282610988565b156107b05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610909836001600160a01b0384166115e1565b60008260000182815481106113e3576113e3611a65565b9060005260206000200154905092915050565b60606000611405836002611da7565b611410906002611d7e565b67ffffffffffffffff81111561142857611428611b2e565b6040519080825280601f01601f191660200182016040528015611452576020820181803683370190505b509050600360fc1b8160008151811061146d5761146d611a65565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061149c5761149c611a65565b60200101906001600160f81b031916908160001a90535060006114c0846002611da7565b6114cb906001611d7e565b90505b6001811115611543576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114ff576114ff611a65565b1a60f81b82828151811061151557611515611a65565b60200101906001600160f81b031916908160001a90535060049490941c9361153c81611dc6565b90506114ce565b5083156109095760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079d565b60008181526001830160205260408120546115d9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103c3565b5060006103c3565b600081815260018301602052604081205480156116ca576000611605600183611c53565b855490915060009061161990600190611c53565b905081811461167e57600086600001828154811061163957611639611a65565b906000526020600020015490508087600001848154811061165c5761165c611a65565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061168f5761168f611ddd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103c3565b60009150506103c3565b82805482825590600052602060002090810192821561170f579160200282015b8281111561170f5782358255916020019190600101906116f4565b5061171b92915061171f565b5090565b5b8082111561171b5760008155600101611720565b60006020828403121561174657600080fd5b81356001600160e01b03198116811461090957600080fd5b80356001600160a01b038116811461177557600080fd5b919050565b60008060006060848603121561178f57600080fd5b6117988461175e565b925060208401359150604084013580151581146117b457600080fd5b809150509250925092565b6000602082840312156117d157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611808578151875295820195908201906001016117ec565b509495945050505050565b60208152600061090960208301846117d8565b600080600080600060a0868803121561183e57600080fd5b8535945061184e6020870161175e565b9350604086013560ff8116811461186457600080fd5b94979396509394606081013594506080013592915050565b6000806040838503121561188f57600080fd5b8235915061189f6020840161175e565b90509250929050565b600080604083850312156118bb57600080fd5b6118c48361175e565b946020939093013593505050565b600080604083850312156118e557600080fd5b6118ee8361175e565b915061189f6020840161175e565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b60005b83811015611939578181015183820152602001611921565b50506000910152565b602081526000825180602084015261196181604085016020870161191e565b601f01601f19169190910160400192915050565b60006020828403121561198757600080fd5b6109098261175e565b600080602083850312156119a357600080fd5b823567ffffffffffffffff808211156119bb57600080fd5b818501915085601f8301126119cf57600080fd5b8135818111156119de57600080fd5b8660208260051b85010111156119f357600080fd5b60209290920196919550909350505050565b60008060208385031215611a1857600080fd5b823567ffffffffffffffff80821115611a3057600080fd5b818501915085601f830112611a4457600080fd5b813581811115611a5357600080fd5b8660208285010111156119f357600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a8f57607f821691505b602082108103611aaf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611add57611add611ab5565b5060010190565b604081526000611af760408301866117d8565b82810360208401528381526001600160fb1b03841115611b1657600080fd5b8360051b808660208401370160200195945050505050565b634e487b7160e01b600052604160045260246000fd5b601f82111561072c57600081815260208120601f850160051c81016020861015611b6b5750805b601f850160051c820191505b81811015611b8a57828155600101611b77565b505050505050565b67ffffffffffffffff831115611baa57611baa611b2e565b611bbe83611bb88354611a7b565b83611b44565b6000601f841160018114611bf25760008515611bda5750838201355b600019600387901b1c1916600186901b178355611c4c565b600083815260209020601f19861690835b82811015611c235786850135825560209485019460019092019101611c03565b5086821015611c405760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818103818111156103c3576103c3611ab5565b8183823760009101908152919050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351611cae81601a85016020880161191e565b835190830190611cc581601a84016020880161191e565b01601a01949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611d0381601785016020880161191e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611d3481602884016020880161191e565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082611d6557611d65611d40565b500490565b600082611d7957611d79611d40565b500690565b808201808211156103c3576103c3611ab5565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611dc157611dc1611ab5565b500290565b600081611dd557611dd5611ab5565b506000190190565b634e487b7160e01b600052603160045260246000fdfe0d5ac11ce98a7539557343d2c66c127dd8d0e8fb181c5ec16cb674ddf827d1090c24059e922be4fa5a047081cbfa54efdf798eaf1522ed3f9b731a560ea8e28aa26469706673582212208f13422f32bf577b142f3fc4a3ac35c92d7745725ab6f2c5377795fbd8cf4a2f64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101635760003560e01c806366e4b702116100ce578063a217fddf11610087578063a217fddf14610324578063babcc5391461032c578063c0aa0e8a1461033f578063ca15c87314610352578063d469d0c214610365578063d499ca5b14610378578063d547741f1461038b57600080fd5b806366e4b702146102a057806387a20680146102b55780639010d07c146102be57806390d63fa3146102e957806391d14854146102fc57806392ecf5771461030f57600080fd5b8063283762031161012057806328376203146102115780632c5783b1146102245780632f2ff15d1461023957806336568abe1461024c57806346db089d1461025f578063485cc9551461028d57600080fd5b806301ffc9a71461016857806302ffc7641461019057806308f419f4146101a5578063209b9833146101b8578063248a9ca3146101cd578063251e831b146101fe575b600080fd5b61017b610176366004611734565b61039e565b60405190151581526020015b60405180910390f35b6101a361019e36600461177a565b6103c9565b005b6101a36101b33660046117bf565b610438565b6101c06104b9565b6040516101879190611813565b6101f06101db3660046117bf565b60009081526065602052604090206001015490565b604051908152602001610187565b6101f061020c3660046117bf565b610511565b6101a361021f366004611826565b610532565b6101f0600080516020611df483398151915281565b6101a361024736600461187c565b610707565b6101a361025a36600461187c565b610731565b61017b61026d3660046118a8565b60c960209081526000928352604080842090915290825290205460ff1681565b6101a361029b3660046118d2565b6107b4565b6101f0600080516020611e1483398151915281565b6101f060cb5481565b6102d16102cc3660046118fc565b6108f1565b6040516001600160a01b039091168152602001610187565b6101a36102f73660046117bf565b610910565b61017b61030a36600461187c565b610988565b6103176109b3565b6040516101879190611942565b6101f0600081565b61017b61033a366004611975565b610a59565b61031761034d3660046117bf565b610af8565b6101f06103603660046117bf565b610ba4565b6101a3610373366004611990565b610bbb565b6101a3610386366004611a05565b610cd1565b6101a361039936600461187c565b610d98565b60006001600160e01b03198216635a05180f60e01b14806103c357506103c382610dbd565b92915050565b600080516020611e148339815191526103e181610df2565b6103ec848484610dff565b82846001600160a01b03167f8790cc6238d5595e48c16f8ab0f7bb594de43f92c9cededbc73f1043a5a195378460405161042a911515815260200190565b60405180910390a350505050565b600080516020611df483398151915261045081610df2565b60ca54821061047257604051636c8c0e7160e11b815260040160405180910390fd5b60cb80549083905560408051828152602081018590527f5e8daff369d4fc100bb21041db28b9959d722325e8e96d67f62cacf7430fcaa591015b60405180910390a1505050565b606060cc80548060200260200160405190810160405280929190818152602001828054801561050757602002820191906000526020600020905b8154815260200190600101908083116104f3575b5050505050905090565b60cc818154811061052157600080fd5b600091825260209091200154905081565b6001600160a01b038416600090815260c96020908152604080832088845290915290205460ff161561057757604051630231faf760e31b815260040160405180910390fd5b8260ff16601b1415801561058f57508260ff16601c14155b156105ad57604051632aea050d60e21b815260040160405180910390fd5b600061065d60ca87815481106105c5576105c5611a65565b9060005260206000200180546105da90611a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461060690611a7b565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050610e8c565b9050600061066d82868686610ec7565b9050856001600160a01b0316816001600160a01b0316146106a157604051632057875960e21b815260040160405180910390fd5b6106ad86886001610dff565b6040805160ff871681526020810186905290810184905287906001600160a01b038816907ff9e85d67fd10c2dd0202c1221003448f346b28afbeb3bcbcc4544ed032c049179060600160405180910390a350505050505050565b60008281526065602052604090206001015461072281610df2565b61072c8383610eef565b505050565b6001600160a01b03811633146107a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107b08282610f11565b5050565b600054610100900460ff16158080156107d45750600054600160ff909116105b806107ee5750303b1580156107ee575060005460ff166001145b6108515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161079d565b6000805460ff191660011790558015610874576000805461ff0019166101001790555b61087f600084610eef565b610897600080516020611df483398151915284610eef565b6108af600080516020611e1483398151915283610eef565b801561072c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016104ac565b60008281526097602052604081206109099083610f33565b9392505050565b33600090815260c96020908152604080832084845290915290205460ff161561094c57604051630231faf760e31b815260040160405180910390fd5b61095833826001610dff565b604051819033907f79abfa347949186dd2aab9e10622b23704ef7646387bfe22bf6a43b1de16fb3990600090a350565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca60cb54815481106109ca576109ca611a65565b9060005260206000200180546109df90611a7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0b90611a7b565b80156105075780601f10610a2d57610100808354040283529160200191610507565b820191906000526020600020905b815481529060010190602001808311610a3b57509395945050505050565b60006001600160a01b0382163b15610a7357506001919050565b60cc5460005b81811015610aee576001600160a01b038416600090815260c96020526040812060cc805491929184908110610ab057610ab0611a65565b6000918252602080832090910154835282019290925260400190205460ff1615610ade575060019392505050565b610ae781611acb565b9050610a79565b5060009392505050565b60ca8181548110610b0857600080fd5b906000526020600020016000915090508054610b2390611a7b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4f90611a7b565b8015610b9c5780601f10610b7157610100808354040283529160200191610b9c565b820191906000526020600020905b815481529060010190602001808311610b7f57829003601f168201915b505050505081565b60008181526097602052604081206103c390610f3f565b600080516020611df4833981519152610bd381610df2565b60005b82811015610c285760ca54848483818110610bf357610bf3611a65565b9050602002013510610c1857604051636c8c0e7160e11b815260040160405180910390fd5b610c2181611acb565b9050610bd6565b50600060cc805480602002602001604051908101604052809291908181526020018280548015610c7757602002820191906000526020600020905b815481526020019060010190808311610c63575b50505050509050838360cc9190610c8f9291906116d4565b507f7a08cd4d8076e08d23c6543b0d17e2be01826237b85801f5217e43142d67b40b818585604051610cc393929190611ae4565b60405180910390a150505050565b600080516020611df4833981519152610ce981610df2565b60ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee101610d26838583611b92565b5060ca54610d3a906101b390600190611c53565b7fc51edb2a65671d8f55ac76a92007ffc21abbc32897ddc88fa4a3a4c4ed9607338383604051610d6b929190611c66565b60405190819003902060ca54610d8390600190611c53565b604080519283526020830191909152016104ac565b600082815260656020526040902060010154610db381610df2565b61072c8383610f11565b60006001600160e01b03198216637965db0b60e01b14806103c357506301ffc9a760e01b6001600160e01b03198316146103c3565b610dfc8133610f49565b50565b60ca548210610e2157604051636c8c0e7160e11b815260040160405180910390fd5b6001600160a01b038316600081815260c960209081526040808320868452825291829020805460ff191685151590811790915591519182528492917f66760e9ee1f8138c12bebf3adf6fae271560cf0f4e42ce31350bb4a5b7a8b462910160405180910390a3505050565b6000610e988251610fad565b82604051602001610eaa929190611c76565b604051602081830303815290604052805190602001209050919050565b6000806000610ed8878787876110b6565b91509150610ee581611170565b5095945050505050565b610ef982826112b5565b600082815260976020526040902061072c908261133b565b610f1b8282611350565b600082815260976020526040902061072c90826113b7565b600061090983836113cc565b60006103c3825490565b610f538282610988565b6107b057610f6b816001600160a01b031660146113f6565b610f768360206113f6565b604051602001610f87929190611cd1565b60408051601f198184030181529082905262461bcd60e51b825261079d91600401611942565b606081600003610fd45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ffe5780610fe881611acb565b9150610ff79050600a83611d56565b9150610fd8565b60008167ffffffffffffffff81111561101957611019611b2e565b6040519080825280601f01601f191660200182016040528015611043576020820181803683370190505b5090505b84156110ae57611058600183611c53565b9150611065600a86611d6a565b611070906030611d7e565b60f81b81838151811061108557611085611a65565b60200101906001600160f81b031916908160001a9053506110a7600a86611d56565b9450611047565b949350505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156110e35750600090506003611167565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611137573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661116057600060019250925050611167565b9150600090505b94509492505050565b600081600481111561118457611184611d91565b0361118c5750565b60018160048111156111a0576111a0611d91565b036111e85760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015260640161079d565b60028160048111156111fc576111fc611d91565b036112495760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161079d565b600381600481111561125d5761125d611d91565b03610dfc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161079d565b6112bf8282610988565b6107b05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556112f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610909836001600160a01b038416611592565b61135a8282610988565b156107b05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610909836001600160a01b0384166115e1565b60008260000182815481106113e3576113e3611a65565b9060005260206000200154905092915050565b60606000611405836002611da7565b611410906002611d7e565b67ffffffffffffffff81111561142857611428611b2e565b6040519080825280601f01601f191660200182016040528015611452576020820181803683370190505b509050600360fc1b8160008151811061146d5761146d611a65565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061149c5761149c611a65565b60200101906001600160f81b031916908160001a90535060006114c0846002611da7565b6114cb906001611d7e565b90505b6001811115611543576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106114ff576114ff611a65565b1a60f81b82828151811061151557611515611a65565b60200101906001600160f81b031916908160001a90535060049490941c9361153c81611dc6565b90506114ce565b5083156109095760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161079d565b60008181526001830160205260408120546115d9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103c3565b5060006103c3565b600081815260018301602052604081205480156116ca576000611605600183611c53565b855490915060009061161990600190611c53565b905081811461167e57600086600001828154811061163957611639611a65565b906000526020600020015490508087600001848154811061165c5761165c611a65565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061168f5761168f611ddd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103c3565b60009150506103c3565b82805482825590600052602060002090810192821561170f579160200282015b8281111561170f5782358255916020019190600101906116f4565b5061171b92915061171f565b5090565b5b8082111561171b5760008155600101611720565b60006020828403121561174657600080fd5b81356001600160e01b03198116811461090957600080fd5b80356001600160a01b038116811461177557600080fd5b919050565b60008060006060848603121561178f57600080fd5b6117988461175e565b925060208401359150604084013580151581146117b457600080fd5b809150509250925092565b6000602082840312156117d157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611808578151875295820195908201906001016117ec565b509495945050505050565b60208152600061090960208301846117d8565b600080600080600060a0868803121561183e57600080fd5b8535945061184e6020870161175e565b9350604086013560ff8116811461186457600080fd5b94979396509394606081013594506080013592915050565b6000806040838503121561188f57600080fd5b8235915061189f6020840161175e565b90509250929050565b600080604083850312156118bb57600080fd5b6118c48361175e565b946020939093013593505050565b600080604083850312156118e557600080fd5b6118ee8361175e565b915061189f6020840161175e565b6000806040838503121561190f57600080fd5b50508035926020909101359150565b60005b83811015611939578181015183820152602001611921565b50506000910152565b602081526000825180602084015261196181604085016020870161191e565b601f01601f19169190910160400192915050565b60006020828403121561198757600080fd5b6109098261175e565b600080602083850312156119a357600080fd5b823567ffffffffffffffff808211156119bb57600080fd5b818501915085601f8301126119cf57600080fd5b8135818111156119de57600080fd5b8660208260051b85010111156119f357600080fd5b60209290920196919550909350505050565b60008060208385031215611a1857600080fd5b823567ffffffffffffffff80821115611a3057600080fd5b818501915085601f830112611a4457600080fd5b813581811115611a5357600080fd5b8660208285010111156119f357600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611a8f57607f821691505b602082108103611aaf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611add57611add611ab5565b5060010190565b604081526000611af760408301866117d8565b82810360208401528381526001600160fb1b03841115611b1657600080fd5b8360051b808660208401370160200195945050505050565b634e487b7160e01b600052604160045260246000fd5b601f82111561072c57600081815260208120601f850160051c81016020861015611b6b5750805b601f850160051c820191505b81811015611b8a57828155600101611b77565b505050505050565b67ffffffffffffffff831115611baa57611baa611b2e565b611bbe83611bb88354611a7b565b83611b44565b6000601f841160018114611bf25760008515611bda5750838201355b600019600387901b1c1916600186901b178355611c4c565b600083815260209020601f19861690835b82811015611c235786850135825560209485019460019092019101611c03565b5086821015611c405760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818103818111156103c3576103c3611ab5565b8183823760009101908152919050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351611cae81601a85016020880161191e565b835190830190611cc581601a84016020880161191e565b01601a01949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351611d0381601785016020880161191e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611d3481602884016020880161191e565b01602801949350505050565b634e487b7160e01b600052601260045260246000fd5b600082611d6557611d65611d40565b500490565b600082611d7957611d79611d40565b500690565b808201808211156103c3576103c3611ab5565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615611dc157611dc1611ab5565b500290565b600081611dd557611dd5611ab5565b506000190190565b634e487b7160e01b600052603160045260246000fdfe0d5ac11ce98a7539557343d2c66c127dd8d0e8fb181c5ec16cb674ddf827d1090c24059e922be4fa5a047081cbfa54efdf798eaf1522ed3f9b731a560ea8e28aa26469706673582212208f13422f32bf577b142f3fc4a3ac35c92d7745725ab6f2c5377795fbd8cf4a2f64736f6c63430008100033",
  "devdoc": {
    "author": "Ondo Finance",
    "kind": "dev",
    "methods": {
      "addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)": {
        "params": {
          "account": "Address of the account to add to the allowlist",
          "r": "r component of the signature",
          "s": "s component of the signature",
          "termIndex": "Term index for which the user is adding themselves to the                  allowlist",
          "v": "v component of the signature"
        }
      },
      "addSelfToAllowlist(uint256)": {
        "params": {
          "termIndex": "Term index for which the user is adding themselves to the                  allowlist"
        }
      },
      "addTerm(string)": {
        "details": "This function sets the current term index as the added termThe added term is not valid until it's added to validIndexes",
        "params": {
          "term": "Term to add"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAllowed(address)": {
        "details": "Contracts are always allowed. Any entity that has signed a valid term      or added themselves to the allowslit for a valid term will pass the      check",
        "params": {
          "account": "Address of the account to check"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAccountStatus(address,uint256,bool)": {
        "details": "If a user's status has been set to false, a user can then set their      status back to true. This behavior is known. The allowlist should be      used in conjunction with a blocklist",
        "params": {
          "account": "Address of the account to set the status for",
          "status": "New status of the account",
          "termIndex": "Term index for which to update status for"
        }
      },
      "setCurrentTermIndex(uint256)": {
        "details": "The current term index is not a valid term until it's added to      validIndexesThis function will revert if the `_currentTermIndex` out of bounds      of the terms array",
        "params": {
          "_currentTermIndex": "New current term index"
        }
      },
      "setValidTermIndexes(uint256[])": {
        "details": "Once the validIndexes are set, any user who has been verified to sign      a particular term will pass the `isAllowed` check",
        "params": {
          "_validIndexes": "List of new valid term indexes"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "ALLOWLIST_ADMIN": {
        "details": "Role based access control roles"
      },
      "verifications": {
        "details": "{<EOA> : {<term index> : <is verified>}};"
      }
    },
    "title": "AllowlistUpgradeable",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidTermIndex()": [
        {
          "notice": "ERRORS ///"
        }
      ]
    },
    "events": {
      "AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Event emitted when an account is added to the allowlist by a signature"
      },
      "AccountAddedSelf(address,uint256)": {
        "notice": "Event emitted when an account adds itself added to the allowlist"
      },
      "AccountStatusSet(address,uint256,bool)": {
        "notice": "Event emitted when an account status is set"
      },
      "AccountStatusSetByAdmin(address,uint256,bool)": {
        "notice": "Event emitted when an accoun status is set by an admin"
      },
      "CurrentTermIndexSet(uint256,uint256)": {
        "notice": "Event emitted when the current term index is set"
      },
      "TermAdded(bytes32,uint256)": {
        "notice": "Event emitted when a term is added"
      },
      "ValidTermIndexesSet(uint256[],uint256[])": {
        "notice": "Event emitted when the valid term indexes are set"
      }
    },
    "kind": "user",
    "methods": {
      "addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)": {
        "notice": "Function that allows anyone to add a user to the allowlist with a         given off-chain signature"
      },
      "addSelfToAllowlist(uint256)": {
        "notice": "Function that allows a user to add themselves to the allowlist         for a given `termIndex`"
      },
      "addTerm(string)": {
        "notice": "Adds a term to the list of possible terms"
      },
      "getCurrentTerm()": {
        "notice": "Returns the current terms string associated with the         `currentTermIndex`"
      },
      "getValidTermIndexes()": {
        "notice": "Gets a list term indexes that are valid for a user to be on the         allowlist"
      },
      "isAllowed(address)": {
        "notice": "Function that checks whether a user passes the allowlist check"
      },
      "setAccountStatus(address,uint256,bool)": {
        "notice": "Admin function to set an accounts status for a given term index"
      },
      "setCurrentTermIndex(uint256)": {
        "notice": "Sets the current term index"
      },
      "setValidTermIndexes(uint256[])": {
        "notice": "Sets the list of valid term indexes"
      }
    },
    "notice": "This contract manages the allowlist status for accounts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3967,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3970,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7330,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7448,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3562,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3557_storage)"
      },
      {
        "astId": 3861,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3411,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7761_storage)"
      },
      {
        "astId": 3521,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19458,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "verifications",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 19461,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "terms",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 19464,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "currentTermIndex",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 19467,
        "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
        "label": "validIndexes",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7761_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7761_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3557_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3557_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7761_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7760,
            "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7460_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3557_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 3554,
            "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3556,
            "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7460_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7455,
            "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7459,
            "contract": "contracts/usdy/allowlist/AllowlistUpgradeable.sol:AllowlistUpgradeable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}